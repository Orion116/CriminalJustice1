/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package criminaljustice.GUI;

import FormValidation.formValidation;
import ciminalJustice.DOCX.DocxWriter;

import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.*;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.time.*;
import java.time.format.*;
import static java.time.temporal.ChronoUnit.YEARS;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.border.MatteBorder;
import javax.swing.border.TitledBorder;
import javax.swing.text.BadLocationException;
import org.jdesktop.layout.GroupLayout;
import org.jdesktop.layout.LayoutStyle;
import org.netbeans.lib.awtextra.*;

/**
 *
 * @author orion116
 */
public class TestCardLayout extends javax.swing.JFrame //implements ActionListener
{
    ArrayList<String> Heading = new ArrayList<>();
    ArrayList<Integer> BoxID = new ArrayList<>();
    ArrayList<Integer> Pos = new ArrayList<>();
    ArrayList<String> Name = new ArrayList<>();
    ArrayList<String> DOB = new ArrayList<>();
    ArrayList<Integer> Age = new ArrayList<>();
    ArrayList<String> Street = new ArrayList<>();
    ArrayList<String> CityZip = new ArrayList<>();
    ArrayList<String> Phone = new ArrayList<>();
    ArrayList<String> Race = new ArrayList<>();
    ArrayList<String> Gender = new ArrayList<>();
    ArrayList<String> Email = new ArrayList<>();
    ArrayList<String> Agent = new ArrayList<>();

    ArrayList<String> Type = new ArrayList<>();
    ArrayList<String> Make = new ArrayList<>();
    ArrayList<String> Model = new ArrayList<>();
    ArrayList<String> Color = new ArrayList<>();
    ArrayList<Integer> Year = new ArrayList<>();
    ArrayList<String> VIN = new ArrayList<>();
    ArrayList<String> License = new ArrayList<>();
    ArrayList<String> LastSeen = new ArrayList<>();
    ArrayList<String> Direction = new ArrayList<>();
        
    String[] crimeCodes = new String[]
    {
        "Select Code",
        "0900-1: Murder",
        "0900-2: Negligent Homicide",
        "1000-1: Kidnapping",
        "1100: Sexual Assault",
        "1200: Robbery",
        "1300: Assault",
        "2000: Arson",
        "2200: Breaking & Entering",
        "2300: Larceny",
        "2400-1: Motor Vehicle Theft",
        "2500: Forgery/Counterfeiting",
        "2600: Bad Checks",
        "2900: Malicious Destruction of Property",
        "3000: Retail Fraud",
        "3500: Violations of Controlled Substance Act",
        "3800-1: Child Abuse/Neglect",
        "4100-2: Liquor Violations"
    };
    
    String[] agencies = new String[]
    {
        "Select Agency",
        "ATF",
        "Border Patrol",
        "CIA",
        "Child Protection Services",
        "Customs",
        "FBI",
        "ICE",
        "NSA",
        "State Police"
    };
    
    String[] genders = new String[]
    {
        "Select Gender", 
        "Female", 
        "Male", 
        "Other" 
    };
    
    private int savePressed = 1;
    private final long offSet = 965835; // 1129665 - 965835
    private int boxNum = 2; 
    private int postion = 327025;  // 327025  327025
    private int element = 0;

    /**
     * Creates new form TestCardLayout
     */
    public TestCardLayout()
    {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        helpDialog = new JDialog();
        helpPane = new JPanel();
        txtHelpArea = new JTextArea();
        buttonPanel = new JPanel();
        btnDone = new JButton();
        btnSave = new JButton();
        mainPanel = new JPanel();
        String[] aTest1 = {"1", "2", "3"};
        pane1 = new JPanel();
        jtbBasic = new JTabbedPane();
        basicsPanel = new JPanel();
        lblComplaint = new JLabel();
        complaintNum = new JFormattedTextField();
        lblOfficerInCharge = new JLabel();
        txtOficerInCharge = new JFormattedTextField();
        FileCode = new JComboBox<>();
        lblCodes = new JLabel();
        txtDateOfOffense = new JTextField();
        lblDate = new JLabel();
        lblSecondaryOfficer = new JLabel();
        txtSecOfficer = new JFormattedTextField();
        lblSup = new JLabel();
        txtSupervisor = new JFormattedTextField();
        complainantPane = new JPanel();
        centered1 = new JPanel();
        lblCFname1 = new JLabel();
        jftCFname = new JFormattedTextField();
        lblCLname1 = new JLabel();
        jtfCLname = new JFormattedTextField();
        lblCMInitial1 = new JLabel();
        txtCMInitial = new JTextField();
        lblCDOB1 = new JLabel();
        txtCDOB = new JTextField();
        txtCState = new JTextField();
        lblCState1 = new JLabel();
        txtCCity = new JTextField();
        lblCCity1 = new JLabel();
        txtCAddress = new JTextField();
        lblCAddress1 = new JLabel();
        txtCPhone = new JTextField();
        lblCPhone1 = new JLabel();
        lblCZipcode1 = new JLabel();
        txtCZipcode = new JTextField();
        txtCEmail = new JTextField();
        lblCEmail1 = new JLabel();
        genderBox = new JComboBox();
        txtRace = new JTextField();
        jLabel1 = new JLabel();
        add = new JButton();
        victimPane = new JPanel();
        centered2 = new JPanel();
        jftVFname = new JFormattedTextField();
        lblVFname = new JLabel();
        lblVPhone = new JLabel();
        txtVPhone = new JTextField();
        lblVZipcode = new JLabel();
        txtVZipcode = new JTextField();
        txtVEmail = new JTextField();
        lblVEmail = new JLabel();
        lblVAddress = new JLabel();
        lblVLname1 = new JLabel();
        jtfVLname = new JFormattedTextField();
        txtVAddress = new JTextField();
        lblVMInitial1 = new JLabel();
        txtVMInitial = new JTextField();
        lblVDOB1 = new JLabel();
        txtVDOB = new JTextField();
        txtVState = new JTextField();
        lblVState = new JLabel();
        txtVCity = new JTextField();
        lblVCity = new JLabel();
        genderBox1 = new JComboBox();
        jLabel2 = new JLabel();
        txtRace1 = new JTextField();
        add1 = new JButton();
        witnessPane = new JPanel();
        centered3 = new JPanel();
        jftWFname = new JFormattedTextField();
        lblVLname2 = new JLabel();
        jtfWLname = new JFormattedTextField();
        txtWMInitial = new JTextField();
        lblVDOB2 = new JLabel();
        txtWDOB = new JTextField();
        lblVMInitial2 = new JLabel();
        lblVFname1 = new JLabel();
        lblVPhone1 = new JLabel();
        txtWPhone = new JTextField();
        lblVAddress1 = new JLabel();
        txtWAddress = new JTextField();
        lblVCity1 = new JLabel();
        txtWCity = new JTextField();
        lblVState1 = new JLabel();
        txtWState = new JTextField();
        lblVZipcode1 = new JLabel();
        txtWZipcode = new JTextField();
        lblVEmail1 = new JLabel();
        txtWEmail = new JTextField();
        jLabel3 = new JLabel();
        txtRace2 = new JTextField();
        genderBox2 = new JComboBox();
        add2 = new JButton();
        suspectPane = new JPanel();
        centered4 = new JPanel();
        jftSFname = new JFormattedTextField();
        lblVLname3 = new JLabel();
        jtfSLname = new JFormattedTextField();
        txtSMInitial = new JTextField();
        lblVDOB3 = new JLabel();
        txtSDOB = new JTextField();
        lblVMInitial3 = new JLabel();
        lblVFname2 = new JLabel();
        lblVPhone2 = new JLabel();
        txtSPhone = new JTextField();
        lblVAddress2 = new JLabel();
        txtSAddress = new JTextField();
        lblVCity2 = new JLabel();
        txtSCity = new JTextField();
        lblVState2 = new JLabel();
        txtSState = new JTextField();
        lblVZipcode2 = new JLabel();
        txtSZipcode = new JTextField();
        lblVEmail2 = new JLabel();
        txtSEmail = new JTextField();
        jLabel4 = new JLabel();
        txtRace3 = new JTextField();
        genderBox3 = new JComboBox();
        add3 = new JButton();
        evidencePane = new JPanel();
        evidenceType = new JComboBox();
        otherEvidence = new JTextField();
        lblLocation = new JLabel();
        txtLocation = new JTextField();
        vehiclePane = new JPanel();
        vehicleType = new JComboBox();
        otherVehicle = new JTextField();
        txtMake = new JTextField();
        lblMake = new JLabel();
        lblModel = new JLabel();
        txtModel = new JTextField();
        lblColor = new JLabel();
        txtColor = new JTextField();
        lblYear = new JLabel();
        txtYear = new JTextField();
        lblVIN = new JLabel();
        txtVIN = new JTextField();
        lblLicenseNum = new JLabel();
        txtLicenseNum = new JTextField();
        lblLastSeen = new JLabel();
        txtLastSeen = new JTextField();
        lblDirection = new JLabel();
        txtDirection = new JTextField();
        otherPane = new JPanel();
        jPanel1 = new JPanel();
        jftOFname = new JFormattedTextField();
        lblVLname5 = new JLabel();
        jtfOLname = new JFormattedTextField();
        txtOMInitial = new JTextField();
        lblVDOB5 = new JLabel();
        txtODOB = new JTextField();
        lblVMInitial5 = new JLabel();
        lblVFname4 = new JLabel();
        lblVPhone4 = new JLabel();
        txtOPhone = new JTextField();
        lblVAddress4 = new JLabel();
        txtOAddress = new JTextField();
        lblVCity4 = new JLabel();
        txtOCity = new JTextField();
        lblVState4 = new JLabel();
        txtOState = new JTextField();
        lblVZipcode4 = new JLabel();
        txtOZipcode = new JTextField();
        lblVEmail4 = new JLabel();
        txtOEmail = new JTextField();
        agencyCB = new JComboBox<String>();
        add4 = new JButton();
        pane2 = new JPanel();
        dateVenueScroll = new JScrollPane();
        txtAreaDateVenue = new JTextArea();
        informationScroll = new JScrollPane();
        txtAreaInfo = new JTextArea();
        lblDateVenue = new JLabel();
        lblBackground = new JLabel();
        pane3 = new JPanel();
        jScrollPane2 = new JScrollPane();
        jTextArea1 = new JTextArea();
        MenuBar = new JMenuBar();
        helpMenu = new JMenu();
        help = new JMenuItem();
        aboutMenu = new JMenu();

        FormListener formListener = new FormListener();

        ResourceBundle bundle = ResourceBundle.getBundle("criminaljustice/GUI/Bundle"); // NOI18N
        helpDialog.setTitle(bundle.getString("TestCardLayout.helpDialog.title")); // NOI18N
        helpDialog.setLocation(new Point(260, 70));
        helpDialog.setMinimumSize(new Dimension(600, 300));

        txtHelpArea.setEditable(false);
        txtHelpArea.setBackground(pane1.getBackground());
        txtHelpArea.setColumns(20);
        txtHelpArea.setFont(new Font("Dialog", 0, 14)); // NOI18N
        txtHelpArea.setForeground(pane1.getForeground());
        txtHelpArea.setRows(5);
        txtHelpArea.setText(bundle.getString("TestCardLayout.txtHelpArea.text")); // NOI18N
        txtHelpArea.setBorder(BorderFactory.createEmptyBorder(3, 3, 3, 3));

        GroupLayout helpPaneLayout = new GroupLayout(helpPane);
        helpPane.setLayout(helpPaneLayout);
        helpPaneLayout.setHorizontalGroup(helpPaneLayout.createParallelGroup(GroupLayout.LEADING)
            .add(helpPaneLayout.createSequentialGroup()
                .add(0, 12, Short.MAX_VALUE)
                .add(txtHelpArea, GroupLayout.PREFERRED_SIZE, 830, GroupLayout.PREFERRED_SIZE)
                .add(0, 12, Short.MAX_VALUE))
        );
        helpPaneLayout.setVerticalGroup(helpPaneLayout.createParallelGroup(GroupLayout.LEADING)
            .add(helpPaneLayout.createSequentialGroup()
                .add(0, 0, Short.MAX_VALUE)
                .add(txtHelpArea, GroupLayout.PREFERRED_SIZE, 243, GroupLayout.PREFERRED_SIZE)
                .add(0, 0, Short.MAX_VALUE))
        );

        GroupLayout helpDialogLayout = new GroupLayout(helpDialog.getContentPane());
        helpDialog.getContentPane().setLayout(helpDialogLayout);
        helpDialogLayout.setHorizontalGroup(helpDialogLayout.createParallelGroup(GroupLayout.LEADING)
            .add(0, 854, Short.MAX_VALUE)
            .add(helpDialogLayout.createParallelGroup(GroupLayout.LEADING)
                .add(helpDialogLayout.createSequentialGroup()
                    .add(0, 0, Short.MAX_VALUE)
                    .add(helpPane, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .add(0, 0, Short.MAX_VALUE)))
        );
        helpDialogLayout.setVerticalGroup(helpDialogLayout.createParallelGroup(GroupLayout.LEADING)
            .add(0, 300, Short.MAX_VALUE)
            .add(helpDialogLayout.createParallelGroup(GroupLayout.LEADING)
                .add(helpDialogLayout.createSequentialGroup()
                    .add(0, 29, Short.MAX_VALUE)
                    .add(helpPane, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .add(0, 28, Short.MAX_VALUE)))
        );

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setTitle(bundle.getString("TestCardLayout.title")); // NOI18N
        setLocation(new Point(260, 70));
        setMinimumSize(new Dimension(854, 375));
        setName("jfrTestCardLayout"); // NOI18N

        buttonPanel.setMaximumSize(new Dimension(150, 50));
        buttonPanel.setMinimumSize(new Dimension(300, 300));
        buttonPanel.setName("buttonPanel");
        buttonPanel.setPreferredSize(new Dimension(747, 378));

        btnDone.setText(bundle.getString("TestCardLayout.btnDone.text")); // NOI18N
        btnDone.addActionListener(formListener);
        btnDone.addKeyListener(formListener);

        btnSave.setText(bundle.getString("TestCardLayout.btnSave.text")); // NOI18N
        btnSave.setToolTipText(bundle.getString("TestCardLayout.btnSave.toolTipText")); // NOI18N
        btnSave.setEnabled(false);
        btnSave.addActionListener(formListener);
        btnSave.addKeyListener(formListener);

        GroupLayout buttonPanelLayout = new GroupLayout(buttonPanel);
        buttonPanel.setLayout(buttonPanelLayout);
        buttonPanelLayout.setHorizontalGroup(buttonPanelLayout.createParallelGroup(GroupLayout.LEADING)
            .add(GroupLayout.TRAILING, buttonPanelLayout.createSequentialGroup()
                .addContainerGap(304, Short.MAX_VALUE)
                .add(btnDone, GroupLayout.PREFERRED_SIZE, 102, GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(btnSave, GroupLayout.PREFERRED_SIZE, 126, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(304, Short.MAX_VALUE))
        );
        buttonPanelLayout.setVerticalGroup(buttonPanelLayout.createParallelGroup(GroupLayout.LEADING)
            .add(GroupLayout.TRAILING, buttonPanelLayout.createSequentialGroup()
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(buttonPanelLayout.createParallelGroup(GroupLayout.BASELINE)
                    .add(btnDone)
                    .add(btnSave))
                .add(37, 37, 37))
        );

        mainPanel.setBackground(new Color(255, 255, 255));
        mainPanel.setMaximumSize(new Dimension(150, 50));
        mainPanel.setMinimumSize(new Dimension(300, 300));
        mainPanel.setLayout(new CardLayout());

        pane1.setBorder(BorderFactory.createTitledBorder(null, bundle.getString("TestCardLayout.pane1.border.title"))); // NOI18N
        pane1.setAutoscrolls(true);
        pane1.setPreferredSize(new Dimension(835, 525));
        pane1.setLayout(new GridLayout(1, 0));

        jtbBasic.setMinimumSize(new Dimension(860, 400));
        jtbBasic.setName("basicTabs"); // NOI18N

        lblComplaint.setText(bundle.getString("TestCardLayout.lblComplaint.text")); // NOI18N

        complaintNum.setHorizontalAlignment(JTextField.LEFT);
        complaintNum.setMinimumSize(new Dimension(50, 27));
        complaintNum.addFocusListener(formListener);

        lblOfficerInCharge.setText(bundle.getString("TestCardLayout.lblOfficerInCharge.text")); // NOI18N

        txtOficerInCharge.setHorizontalAlignment(JTextField.LEFT);
        txtOficerInCharge.setMinimumSize(new Dimension(50, 27));

        FileCode.setModel(new DefaultComboBoxModel<>(crimeCodes));
        FileCode.setToolTipText(bundle.getString("TestCardLayout.FileCode.toolTipText")); // NOI18N
        FileCode.setName("FileCode");
        FileCode.addItemListener(formListener);

        lblCodes.setText(bundle.getString("TestCardLayout.lblCodes.text")); // NOI18N

        txtDateOfOffense.addFocusListener(formListener);

        lblDate.setText(bundle.getString("TestCardLayout.lblDate.text")); // NOI18N

        lblSecondaryOfficer.setText(bundle.getString("TestCardLayout.lblSecondaryOfficer.text")); // NOI18N

        txtSecOfficer.setHorizontalAlignment(JTextField.LEFT);
        txtSecOfficer.setMinimumSize(new Dimension(50, 27));

        lblSup.setText(bundle.getString("TestCardLayout.lblSup.text")); // NOI18N

        txtSupervisor.setHorizontalAlignment(JTextField.LEFT);
        txtSupervisor.setMinimumSize(new Dimension(50, 27));

        GroupLayout basicsPanelLayout = new GroupLayout(basicsPanel);
        basicsPanel.setLayout(basicsPanelLayout);
        basicsPanelLayout.setHorizontalGroup(basicsPanelLayout.createParallelGroup(GroupLayout.LEADING)
            .add(basicsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(basicsPanelLayout.createParallelGroup(GroupLayout.LEADING, false)
                    .add(basicsPanelLayout.createSequentialGroup()
                        .add(lblOfficerInCharge)
                        .add(18, 18, 18)
                        .add(txtOficerInCharge, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(basicsPanelLayout.createSequentialGroup()
                        .add(lblComplaint)
                        .add(43, 43, 43)
                        .add(complaintNum, GroupLayout.PREFERRED_SIZE, 90, GroupLayout.PREFERRED_SIZE)
                        .add(48, 48, 48)
                        .add(lblCodes))
                    .add(basicsPanelLayout.createSequentialGroup()
                        .add(lblSup)
                        .add(18, 18, 18)
                        .add(txtSupervisor, GroupLayout.PREFERRED_SIZE, 228, GroupLayout.PREFERRED_SIZE)))
                .add(basicsPanelLayout.createParallelGroup(GroupLayout.TRAILING, false)
                    .add(basicsPanelLayout.createSequentialGroup()
                        .add(18, 18, 18)
                        .add(FileCode, GroupLayout.PREFERRED_SIZE, 195, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.UNRELATED)
                        .add(lblDate)
                        .add(18, 18, 18)
                        .add(txtDateOfOffense, GroupLayout.PREFERRED_SIZE, 100, GroupLayout.PREFERRED_SIZE))
                    .add(basicsPanelLayout.createSequentialGroup()
                        .add(37, 37, 37)
                        .add(lblSecondaryOfficer)
                        .add(18, 18, 18)
                        .add(txtSecOfficer, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        basicsPanelLayout.setVerticalGroup(basicsPanelLayout.createParallelGroup(GroupLayout.LEADING)
            .add(basicsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(basicsPanelLayout.createParallelGroup(GroupLayout.BASELINE)
                    .add(lblComplaint)
                    .add(complaintNum, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .add(FileCode, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .add(lblCodes)
                    .add(txtDateOfOffense, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .add(lblDate))
                .add(25, 25, 25)
                .add(basicsPanelLayout.createParallelGroup(GroupLayout.BASELINE)
                    .add(lblOfficerInCharge)
                    .add(txtOficerInCharge, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .add(lblSecondaryOfficer)
                    .add(txtSecOfficer, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .add(25, 25, 25)
                .add(basicsPanelLayout.createParallelGroup(GroupLayout.BASELINE)
                    .add(lblSup)
                    .add(txtSupervisor, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jtbBasic.addTab(bundle.getString("TestCardLayout.basicsPanel.TabConstraints.tabTitle"), basicsPanel); // NOI18N

        complainantPane.setAutoscrolls(true);

        lblCFname1.setText(bundle.getString("TestCardLayout.lblCFname1.text")); // NOI18N

        jftCFname.setHorizontalAlignment(JTextField.LEFT);
        jftCFname.setMinimumSize(new Dimension(50, 27));
        jftCFname.addFocusListener(formListener);

        lblCLname1.setText(bundle.getString("TestCardLayout.lblCLname1.text")); // NOI18N

        jtfCLname.addFocusListener(formListener);

        lblCMInitial1.setText(bundle.getString("TestCardLayout.lblCMInitial1.text")); // NOI18N

        txtCMInitial.addFocusListener(formListener);

        lblCDOB1.setText(bundle.getString("TestCardLayout.lblCDOB1.text")); // NOI18N

        txtCDOB.addFocusListener(formListener);

        txtCState.addFocusListener(formListener);

        lblCState1.setText(bundle.getString("TestCardLayout.lblCState1.text")); // NOI18N

        txtCCity.addFocusListener(formListener);

        lblCCity1.setText(bundle.getString("TestCardLayout.lblCCity1.text")); // NOI18N

        txtCAddress.addFocusListener(formListener);

        lblCAddress1.setText(bundle.getString("TestCardLayout.lblCAddress1.text")); // NOI18N

        txtCPhone.setText(bundle.getString("TestCardLayout.txtCPhone.text")); // NOI18N
        txtCPhone.setMinimumSize(new Dimension(50, 18));
        txtCPhone.addFocusListener(formListener);

        lblCPhone1.setText(bundle.getString("TestCardLayout.lblCPhone1.text")); // NOI18N

        lblCZipcode1.setText(bundle.getString("TestCardLayout.lblCZipcode1.text")); // NOI18N

        txtCZipcode.setMinimumSize(new Dimension(10, 18));
        txtCZipcode.addFocusListener(formListener);

        txtCEmail.addFocusListener(formListener);

        lblCEmail1.setText(bundle.getString("TestCardLayout.lblCEmail1.text")); // NOI18N

        genderBox.setModel(new DefaultComboBoxModel(genders));

        txtRace.setText(bundle.getString("TestCardLayout.txtRace.text")); // NOI18N
        txtRace.addActionListener(formListener);

        jLabel1.setText(bundle.getString("TestCardLayout.jLabel1.text")); // NOI18N

        add.setText(bundle.getString("TestCardLayout.add.text")); // NOI18N
        add.setHorizontalTextPosition(SwingConstants.CENTER);
        add.addActionListener(formListener);

        GroupLayout centered1Layout = new GroupLayout(centered1);
        centered1.setLayout(centered1Layout);
        centered1Layout.setHorizontalGroup(centered1Layout.createParallelGroup(GroupLayout.LEADING)
            .add(centered1Layout.createSequentialGroup()
                .add(15, 15, 15)
                .add(centered1Layout.createParallelGroup(GroupLayout.LEADING, false)
                    .add(centered1Layout.createSequentialGroup()
                        .add(lblCFname1)
                        .add(12, 12, 12)
                        .add(jftCFname, GroupLayout.PREFERRED_SIZE, 150, GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(lblCLname1)
                        .add(8, 8, 8)
                        .add(jtfCLname, GroupLayout.PREFERRED_SIZE, 150, GroupLayout.PREFERRED_SIZE)
                        .add(76, 76, 76)
                        .add(lblCMInitial1)
                        .add(12, 12, 12)
                        .add(txtCMInitial, GroupLayout.PREFERRED_SIZE, 75, GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(lblCDOB1))
                    .add(centered1Layout.createSequentialGroup()
                        .add(12, 12, 12)
                        .add(centered1Layout.createParallelGroup(GroupLayout.LEADING)
                            .add(centered1Layout.createSequentialGroup()
                                .add(lblCZipcode1)
                                .add(12, 12, 12)
                                .add(txtCZipcode, GroupLayout.PREFERRED_SIZE, 52, GroupLayout.PREFERRED_SIZE)
                                .add(12, 12, 12)
                                .add(lblCEmail1)
                                .add(18, 18, 18)
                                .add(txtCEmail, GroupLayout.PREFERRED_SIZE, 165, GroupLayout.PREFERRED_SIZE)
                                .add(12, 12, 12)
                                .add(jLabel1)
                                .add(12, 12, 12)
                                .add(txtRace, GroupLayout.PREFERRED_SIZE, 94, GroupLayout.PREFERRED_SIZE)
                                .add(12, 12, 12)
                                .add(genderBox, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .add(centered1Layout.createSequentialGroup()
                                .add(lblCPhone1)
                                .add(12, 12, 12)
                                .add(txtCPhone, GroupLayout.PREFERRED_SIZE, 99, GroupLayout.PREFERRED_SIZE)
                                .add(69, 69, 69)
                                .add(lblCAddress1)
                                .add(17, 17, 17)
                                .add(txtCAddress, GroupLayout.PREFERRED_SIZE, 214, GroupLayout.PREFERRED_SIZE)
                                .add(12, 12, 12)
                                .add(lblCCity1)
                                .add(18, 18, 18)
                                .add(txtCCity)))))
                .add(centered1Layout.createParallelGroup(GroupLayout.LEADING)
                    .add(GroupLayout.TRAILING, centered1Layout.createSequentialGroup()
                        .add(23, 23, 23)
                        .add(lblCState1)
                        .add(12, 12, 12)
                        .add(txtCState, GroupLayout.PREFERRED_SIZE, 30, GroupLayout.PREFERRED_SIZE))
                    .add(centered1Layout.createSequentialGroup()
                        .add(18, 18, 18)
                        .add(centered1Layout.createParallelGroup(GroupLayout.LEADING, false)
                            .add(GroupLayout.TRAILING, add, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(GroupLayout.TRAILING, txtCDOB, GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE))))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        centered1Layout.setVerticalGroup(centered1Layout.createParallelGroup(GroupLayout.LEADING)
            .add(centered1Layout.createSequentialGroup()
                .add(12, 12, 12)
                .add(centered1Layout.createParallelGroup(GroupLayout.LEADING)
                    .add(jftCFname, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .add(jtfCLname, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .add(txtCMInitial, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .add(txtCDOB, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .add(centered1Layout.createSequentialGroup()
                        .add(2, 2, 2)
                        .add(centered1Layout.createParallelGroup(GroupLayout.LEADING)
                            .add(lblCFname1)
                            .add(lblCLname1)
                            .add(lblCMInitial1)
                            .add(lblCDOB1))))
                .add(12, 12, 12)
                .add(centered1Layout.createParallelGroup(GroupLayout.LEADING)
                    .add(txtCPhone, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .add(txtCAddress, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .add(txtCCity, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .add(txtCState, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .add(centered1Layout.createSequentialGroup()
                        .add(2, 2, 2)
                        .add(centered1Layout.createParallelGroup(GroupLayout.LEADING)
                            .add(lblCPhone1)
                            .add(lblCAddress1)
                            .add(lblCCity1)
                            .add(lblCState1))))
                .add(12, 12, 12)
                .add(centered1Layout.createParallelGroup(GroupLayout.LEADING)
                    .add(centered1Layout.createSequentialGroup()
                        .add(5, 5, 5)
                        .add(lblCZipcode1))
                    .add(centered1Layout.createSequentialGroup()
                        .add(3, 3, 3)
                        .add(txtCZipcode, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                    .add(centered1Layout.createSequentialGroup()
                        .add(5, 5, 5)
                        .add(lblCEmail1))
                    .add(centered1Layout.createSequentialGroup()
                        .add(3, 3, 3)
                        .add(txtCEmail, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                    .add(centered1Layout.createSequentialGroup()
                        .add(5, 5, 5)
                        .add(jLabel1))
                    .add(centered1Layout.createSequentialGroup()
                        .add(3, 3, 3)
                        .add(txtRace, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                    .add(centered1Layout.createParallelGroup(GroupLayout.BASELINE)
                        .add(genderBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .add(add)))
                .add(11, 11, 11))
        );

        txtCPhone.getAccessibleContext().setAccessibleName(bundle.getString("TestCardLayout.txtCPhone.AccessibleContext.accessibleName")); // NOI18N

        GroupLayout complainantPaneLayout = new GroupLayout(complainantPane);
        complainantPane.setLayout(complainantPaneLayout);
        complainantPaneLayout.setHorizontalGroup(complainantPaneLayout.createParallelGroup(GroupLayout.LEADING)
            .add(complainantPaneLayout.createSequentialGroup()
                .addContainerGap()
                .add(centered1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(25, 25, 25))
        );
        complainantPaneLayout.setVerticalGroup(complainantPaneLayout.createParallelGroup(GroupLayout.LEADING)
            .add(complainantPaneLayout.createSequentialGroup()
                .addContainerGap()
                .add(centered1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(62, 62, 62))
        );

        jtbBasic.addTab(bundle.getString("TestCardLayout.complainantPane.TabConstraints.tabTitle"), complainantPane); // NOI18N

        victimPane.setMinimumSize(new Dimension(855, 645));

        jftVFname.setHorizontalAlignment(JTextField.LEFT);
        jftVFname.setMinimumSize(new Dimension(50, 27));
        jftVFname.addFocusListener(formListener);

        lblVFname.setText(bundle.getString("TestCardLayout.lblVFname.text")); // NOI18N

        lblVPhone.setText(bundle.getString("TestCardLayout.lblVPhone.text")); // NOI18N

        txtVPhone.setText(bundle.getString("TestCardLayout.txtVPhone.text")); // NOI18N
        txtVPhone.setMinimumSize(new Dimension(50, 18));
        txtVPhone.addFocusListener(formListener);

        lblVZipcode.setText(bundle.getString("TestCardLayout.lblVZipcode.text")); // NOI18N

        txtVZipcode.setMinimumSize(new Dimension(10, 18));
        txtVZipcode.addFocusListener(formListener);

        txtVEmail.addFocusListener(formListener);

        lblVEmail.setText(bundle.getString("TestCardLayout.lblVEmail.text")); // NOI18N

        lblVAddress.setText(bundle.getString("TestCardLayout.lblVAddress.text")); // NOI18N

        lblVLname1.setText(bundle.getString("TestCardLayout.lblVLname1.text")); // NOI18N

        jtfVLname.addFocusListener(formListener);

        txtVAddress.addFocusListener(formListener);

        lblVMInitial1.setText(bundle.getString("TestCardLayout.lblVMInitial1.text")); // NOI18N

        txtVMInitial.addFocusListener(formListener);

        lblVDOB1.setText(bundle.getString("TestCardLayout.lblVDOB1.text")); // NOI18N

        txtVDOB.addFocusListener(formListener);

        txtVState.addFocusListener(formListener);

        lblVState.setText(bundle.getString("TestCardLayout.lblVState.text")); // NOI18N

        txtVCity.setMinimumSize(new Dimension(113, 19));
        txtVCity.addFocusListener(formListener);

        lblVCity.setText(bundle.getString("TestCardLayout.lblVCity.text")); // NOI18N

        genderBox1.setModel(new DefaultComboBoxModel(genders));

        jLabel2.setText(bundle.getString("TestCardLayout.jLabel2.text")); // NOI18N

        txtRace1.setText(bundle.getString("TestCardLayout.txtRace1.text")); // NOI18N
        txtRace1.addActionListener(formListener);

        add1.setText(bundle.getString("TestCardLayout.add1.text")); // NOI18N
        add1.setHorizontalTextPosition(SwingConstants.CENTER);
        add1.addActionListener(formListener);

        GroupLayout centered2Layout = new GroupLayout(centered2);
        centered2.setLayout(centered2Layout);
        centered2Layout.setHorizontalGroup(centered2Layout.createParallelGroup(GroupLayout.LEADING)
            .add(centered2Layout.createSequentialGroup()
                .add(centered2Layout.createParallelGroup(GroupLayout.LEADING)
                    .add(centered2Layout.createSequentialGroup()
                        .add(centered2Layout.createParallelGroup(GroupLayout.LEADING)
                            .add(GroupLayout.TRAILING, centered2Layout.createSequentialGroup()
                                .add(lblVZipcode)
                                .add(12, 12, 12)
                                .add(txtVZipcode, GroupLayout.PREFERRED_SIZE, 52, GroupLayout.PREFERRED_SIZE)
                                .add(12, 12, 12)
                                .add(lblVEmail)
                                .add(18, 18, 18)
                                .add(txtVEmail, GroupLayout.PREFERRED_SIZE, 165, GroupLayout.PREFERRED_SIZE)
                                .add(12, 12, 12)
                                .add(jLabel2)
                                .add(12, 12, 12)
                                .add(txtRace1, GroupLayout.PREFERRED_SIZE, 94, GroupLayout.PREFERRED_SIZE)
                                .add(12, 12, 12)
                                .add(genderBox1, GroupLayout.PREFERRED_SIZE, 152, GroupLayout.PREFERRED_SIZE))
                            .add(centered2Layout.createSequentialGroup()
                                .add(15, 15, 15)
                                .add(lblVFname)
                                .add(12, 12, 12)
                                .add(jftVFname, GroupLayout.PREFERRED_SIZE, 150, GroupLayout.PREFERRED_SIZE)
                                .add(18, 18, 18)
                                .add(lblVLname1)
                                .add(8, 8, 8)
                                .add(jtfVLname, GroupLayout.PREFERRED_SIZE, 150, GroupLayout.PREFERRED_SIZE)
                                .add(76, 76, 76)
                                .add(lblVMInitial1)
                                .add(12, 12, 12)
                                .add(txtVMInitial, GroupLayout.PREFERRED_SIZE, 75, GroupLayout.PREFERRED_SIZE)
                                .add(18, 18, 18)
                                .add(lblVDOB1)))
                        .add(18, 18, 18)
                        .add(centered2Layout.createParallelGroup(GroupLayout.TRAILING)
                            .add(txtVDOB, GroupLayout.PREFERRED_SIZE, 75, GroupLayout.PREFERRED_SIZE)
                            .add(add1, GroupLayout.PREFERRED_SIZE, 75, GroupLayout.PREFERRED_SIZE))
                        .add(0, 0, Short.MAX_VALUE))
                    .add(centered2Layout.createSequentialGroup()
                        .add(27, 27, 27)
                        .add(lblVPhone)
                        .add(12, 12, 12)
                        .add(txtVPhone, GroupLayout.PREFERRED_SIZE, 99, GroupLayout.PREFERRED_SIZE)
                        .add(69, 69, 69)
                        .add(lblVAddress)
                        .add(17, 17, 17)
                        .add(txtVAddress, GroupLayout.PREFERRED_SIZE, 214, GroupLayout.PREFERRED_SIZE)
                        .add(12, 12, 12)
                        .add(lblVCity)
                        .add(18, 18, 18)
                        .add(txtVCity, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(23, 23, 23)
                        .add(lblVState)
                        .add(12, 12, 12)
                        .add(txtVState, GroupLayout.PREFERRED_SIZE, 30, GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        centered2Layout.setVerticalGroup(centered2Layout.createParallelGroup(GroupLayout.LEADING)
            .add(centered2Layout.createSequentialGroup()
                .add(12, 12, 12)
                .add(centered2Layout.createParallelGroup(GroupLayout.LEADING)
                    .add(jftVFname, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .add(jtfVLname, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .add(txtVMInitial, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .add(txtVDOB, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .add(centered2Layout.createSequentialGroup()
                        .add(2, 2, 2)
                        .add(centered2Layout.createParallelGroup(GroupLayout.LEADING, false)
                            .add(lblVFname, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(lblVLname1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(lblVMInitial1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(lblVDOB1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .add(12, 12, 12)
                .add(centered2Layout.createParallelGroup(GroupLayout.LEADING)
                    .add(txtVCity, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .add(txtVState, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .add(txtVPhone, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .add(txtVAddress, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .add(centered2Layout.createSequentialGroup()
                        .add(2, 2, 2)
                        .add(centered2Layout.createParallelGroup(GroupLayout.LEADING)
                            .add(lblVState)
                            .add(centered2Layout.createParallelGroup(GroupLayout.LEADING, false)
                                .add(lblVPhone, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(lblVAddress, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(lblVCity, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .add(12, 12, 12)
                .add(centered2Layout.createParallelGroup(GroupLayout.LEADING)
                    .add(centered2Layout.createSequentialGroup()
                        .add(3, 3, 3)
                        .add(txtVZipcode, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                    .add(centered2Layout.createSequentialGroup()
                        .add(5, 5, 5)
                        .add(lblVEmail))
                    .add(centered2Layout.createSequentialGroup()
                        .add(3, 3, 3)
                        .add(txtVEmail, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                    .add(centered2Layout.createSequentialGroup()
                        .add(5, 5, 5)
                        .add(jLabel2))
                    .add(centered2Layout.createSequentialGroup()
                        .add(3, 3, 3)
                        .add(txtRace1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                    .add(centered2Layout.createParallelGroup(GroupLayout.BASELINE)
                        .add(genderBox1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .add(add1))
                    .add(centered2Layout.createSequentialGroup()
                        .add(5, 5, 5)
                        .add(lblVZipcode)))
                .addContainerGap())
        );

        GroupLayout victimPaneLayout = new GroupLayout(victimPane);
        victimPane.setLayout(victimPaneLayout);
        victimPaneLayout.setHorizontalGroup(victimPaneLayout.createParallelGroup(GroupLayout.LEADING)
            .add(victimPaneLayout.createSequentialGroup()
                .addContainerGap()
                .add(centered2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .add(25, 25, 25))
        );
        victimPaneLayout.setVerticalGroup(victimPaneLayout.createParallelGroup(GroupLayout.LEADING)
            .add(victimPaneLayout.createSequentialGroup()
                .addContainerGap()
                .add(centered2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(523, Short.MAX_VALUE))
        );

        jtbBasic.addTab(bundle.getString("TestCardLayout.victimPane.TabConstraints.tabTitle"), victimPane); // NOI18N

        jftWFname.setHorizontalAlignment(JTextField.LEFT);
        jftWFname.setMinimumSize(new Dimension(50, 27));
        jftWFname.addFocusListener(formListener);

        lblVLname2.setText(bundle.getString("TestCardLayout.lblVLname2.text")); // NOI18N

        jtfWLname.addFocusListener(formListener);

        txtWMInitial.addFocusListener(formListener);

        lblVDOB2.setText(bundle.getString("TestCardLayout.lblVDOB2.text")); // NOI18N

        txtWDOB.addFocusListener(formListener);

        lblVMInitial2.setText(bundle.getString("TestCardLayout.lblVMInitial2.text")); // NOI18N

        lblVFname1.setText(bundle.getString("TestCardLayout.lblVFname1.text")); // NOI18N

        lblVPhone1.setText(bundle.getString("TestCardLayout.lblVPhone1.text")); // NOI18N

        txtWPhone.setText(bundle.getString("TestCardLayout.txtWPhone.text")); // NOI18N
        txtWPhone.setMinimumSize(new Dimension(50, 18));
        txtWPhone.addFocusListener(formListener);

        lblVAddress1.setText(bundle.getString("TestCardLayout.lblVAddress1.text")); // NOI18N

        txtWAddress.addFocusListener(formListener);

        lblVCity1.setText(bundle.getString("TestCardLayout.lblVCity1.text")); // NOI18N

        txtWCity.addFocusListener(formListener);

        lblVState1.setText(bundle.getString("TestCardLayout.lblVState1.text")); // NOI18N

        txtWState.addFocusListener(formListener);

        lblVZipcode1.setText(bundle.getString("TestCardLayout.lblVZipcode1.text")); // NOI18N

        txtWZipcode.setMinimumSize(new Dimension(10, 18));
        txtWZipcode.addFocusListener(formListener);

        lblVEmail1.setText(bundle.getString("TestCardLayout.lblVEmail1.text")); // NOI18N

        txtWEmail.addFocusListener(formListener);

        jLabel3.setText(bundle.getString("TestCardLayout.jLabel3.text")); // NOI18N

        txtRace2.setText(bundle.getString("TestCardLayout.txtRace2.text")); // NOI18N
        txtRace2.addActionListener(formListener);

        genderBox2.setModel(new DefaultComboBoxModel(genders));

        add2.setText(bundle.getString("TestCardLayout.add2.text")); // NOI18N
        add2.setHorizontalTextPosition(SwingConstants.CENTER);
        add2.addActionListener(formListener);

        GroupLayout centered3Layout = new GroupLayout(centered3);
        centered3.setLayout(centered3Layout);
        centered3Layout.setHorizontalGroup(centered3Layout.createParallelGroup(GroupLayout.LEADING)
            .add(centered3Layout.createSequentialGroup()
                .add(15, 15, 15)
                .add(centered3Layout.createParallelGroup(GroupLayout.TRAILING)
                    .add(centered3Layout.createSequentialGroup()
                        .add(lblVZipcode1)
                        .add(12, 12, 12)
                        .add(txtWZipcode, GroupLayout.PREFERRED_SIZE, 52, GroupLayout.PREFERRED_SIZE)
                        .add(12, 12, 12)
                        .add(lblVEmail1)
                        .add(18, 18, 18)
                        .add(txtWEmail, GroupLayout.PREFERRED_SIZE, 165, GroupLayout.PREFERRED_SIZE)
                        .add(12, 12, 12)
                        .add(jLabel3)
                        .addPreferredGap(LayoutStyle.RELATED)
                        .add(txtRace2, GroupLayout.PREFERRED_SIZE, 94, GroupLayout.PREFERRED_SIZE)
                        .add(12, 12, 12)
                        .add(genderBox2, GroupLayout.PREFERRED_SIZE, 152, GroupLayout.PREFERRED_SIZE))
                    .add(centered3Layout.createSequentialGroup()
                        .add(lblVPhone1)
                        .add(12, 12, 12)
                        .add(txtWPhone, GroupLayout.PREFERRED_SIZE, 99, GroupLayout.PREFERRED_SIZE)
                        .add(69, 69, 69)
                        .add(lblVAddress1)
                        .add(17, 17, 17)
                        .add(txtWAddress, GroupLayout.PREFERRED_SIZE, 214, GroupLayout.PREFERRED_SIZE)
                        .add(12, 12, 12)
                        .add(lblVCity1)
                        .add(18, 18, 18)
                        .add(txtWCity, GroupLayout.PREFERRED_SIZE, 113, GroupLayout.PREFERRED_SIZE))
                    .add(centered3Layout.createSequentialGroup()
                        .add(lblVFname1)
                        .add(12, 12, 12)
                        .add(jftWFname, GroupLayout.PREFERRED_SIZE, 150, GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(lblVLname2)
                        .add(8, 8, 8)
                        .add(jtfWLname, GroupLayout.PREFERRED_SIZE, 150, GroupLayout.PREFERRED_SIZE)
                        .add(76, 76, 76)
                        .add(lblVMInitial2)
                        .add(12, 12, 12)
                        .add(txtWMInitial, GroupLayout.PREFERRED_SIZE, 75, GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(lblVDOB2)))
                .add(centered3Layout.createParallelGroup(GroupLayout.LEADING)
                    .add(centered3Layout.createSequentialGroup()
                        .add(23, 23, 23)
                        .add(lblVState1)
                        .add(12, 12, 12)
                        .add(txtWState, GroupLayout.PREFERRED_SIZE, 30, GroupLayout.PREFERRED_SIZE))
                    .add(centered3Layout.createSequentialGroup()
                        .add(18, 18, 18)
                        .add(txtWDOB, GroupLayout.PREFERRED_SIZE, 75, GroupLayout.PREFERRED_SIZE))
                    .add(GroupLayout.TRAILING, centered3Layout.createSequentialGroup()
                        .addPreferredGap(LayoutStyle.RELATED)
                        .add(add2, GroupLayout.PREFERRED_SIZE, 75, GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        centered3Layout.setVerticalGroup(centered3Layout.createParallelGroup(GroupLayout.LEADING)
            .add(centered3Layout.createSequentialGroup()
                .add(12, 12, 12)
                .add(centered3Layout.createParallelGroup(GroupLayout.LEADING)
                    .add(jftWFname, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .add(jtfWLname, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .add(txtWMInitial, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .add(txtWDOB, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .add(centered3Layout.createSequentialGroup()
                        .add(2, 2, 2)
                        .add(centered3Layout.createParallelGroup(GroupLayout.LEADING)
                            .add(lblVFname1)
                            .add(lblVLname2)
                            .add(lblVMInitial2)
                            .add(lblVDOB2))))
                .add(12, 12, 12)
                .add(centered3Layout.createParallelGroup(GroupLayout.LEADING)
                    .add(txtWPhone, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .add(txtWAddress, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .add(txtWCity, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .add(txtWState, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .add(centered3Layout.createSequentialGroup()
                        .add(2, 2, 2)
                        .add(centered3Layout.createParallelGroup(GroupLayout.LEADING)
                            .add(lblVPhone1)
                            .add(lblVAddress1)
                            .add(lblVCity1)
                            .add(lblVState1))))
                .add(centered3Layout.createParallelGroup(GroupLayout.LEADING)
                    .add(centered3Layout.createSequentialGroup()
                        .add(17, 17, 17)
                        .add(lblVZipcode1))
                    .add(centered3Layout.createSequentialGroup()
                        .add(15, 15, 15)
                        .add(txtWZipcode, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                    .add(centered3Layout.createSequentialGroup()
                        .add(17, 17, 17)
                        .add(lblVEmail1))
                    .add(centered3Layout.createSequentialGroup()
                        .add(15, 15, 15)
                        .add(txtWEmail, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                    .add(centered3Layout.createSequentialGroup()
                        .add(15, 15, 15)
                        .add(centered3Layout.createParallelGroup(GroupLayout.BASELINE)
                            .add(jLabel3)
                            .add(txtRace2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
                    .add(centered3Layout.createSequentialGroup()
                        .add(12, 12, 12)
                        .add(centered3Layout.createParallelGroup(GroupLayout.BASELINE)
                            .add(genderBox2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .add(add2))))
                .addContainerGap())
        );

        GroupLayout witnessPaneLayout = new GroupLayout(witnessPane);
        witnessPane.setLayout(witnessPaneLayout);
        witnessPaneLayout.setHorizontalGroup(witnessPaneLayout.createParallelGroup(GroupLayout.LEADING)
            .add(witnessPaneLayout.createSequentialGroup()
                .addContainerGap()
                .add(centered3, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        witnessPaneLayout.setVerticalGroup(witnessPaneLayout.createParallelGroup(GroupLayout.LEADING)
            .add(witnessPaneLayout.createSequentialGroup()
                .addContainerGap()
                .add(centered3, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jtbBasic.addTab(bundle.getString("TestCardLayout.witnessPane.TabConstraints.tabTitle"), witnessPane); // NOI18N

        jftSFname.setHorizontalAlignment(JTextField.LEFT);
        jftSFname.setMinimumSize(new Dimension(50, 27));
        jftSFname.addFocusListener(formListener);

        lblVLname3.setText(bundle.getString("TestCardLayout.lblVLname3.text")); // NOI18N

        jtfSLname.addFocusListener(formListener);

        txtSMInitial.addFocusListener(formListener);

        lblVDOB3.setText(bundle.getString("TestCardLayout.lblVDOB3.text")); // NOI18N

        txtSDOB.addFocusListener(formListener);

        lblVMInitial3.setText(bundle.getString("TestCardLayout.lblVMInitial3.text")); // NOI18N

        lblVFname2.setText(bundle.getString("TestCardLayout.lblVFname2.text")); // NOI18N

        lblVPhone2.setText(bundle.getString("TestCardLayout.lblVPhone2.text")); // NOI18N

        txtSPhone.setText(bundle.getString("TestCardLayout.txtSPhone.text")); // NOI18N
        txtSPhone.setMinimumSize(new Dimension(50, 18));
        txtSPhone.addFocusListener(formListener);

        lblVAddress2.setText(bundle.getString("TestCardLayout.lblVAddress2.text")); // NOI18N

        txtSAddress.addFocusListener(formListener);

        lblVCity2.setText(bundle.getString("TestCardLayout.lblVCity2.text")); // NOI18N

        txtSCity.addFocusListener(formListener);

        lblVState2.setText(bundle.getString("TestCardLayout.lblVState2.text")); // NOI18N

        txtSState.addFocusListener(formListener);

        lblVZipcode2.setText(bundle.getString("TestCardLayout.lblVZipcode2.text")); // NOI18N

        txtSZipcode.setMinimumSize(new Dimension(10, 18));
        txtSZipcode.addFocusListener(formListener);

        lblVEmail2.setText(bundle.getString("TestCardLayout.lblVEmail2.text")); // NOI18N

        txtSEmail.addFocusListener(formListener);

        jLabel4.setText(bundle.getString("TestCardLayout.jLabel4.text")); // NOI18N

        txtRace3.setText(bundle.getString("TestCardLayout.txtRace3.text")); // NOI18N
        txtRace3.addActionListener(formListener);

        genderBox3.setModel(new DefaultComboBoxModel(genders));

        add3.setText(bundle.getString("TestCardLayout.add3.text")); // NOI18N
        add3.setHorizontalTextPosition(SwingConstants.CENTER);
        add3.addActionListener(formListener);

        GroupLayout centered4Layout = new GroupLayout(centered4);
        centered4.setLayout(centered4Layout);
        centered4Layout.setHorizontalGroup(centered4Layout.createParallelGroup(GroupLayout.LEADING)
            .add(centered4Layout.createSequentialGroup()
                .add(centered4Layout.createParallelGroup(GroupLayout.LEADING)
                    .add(centered4Layout.createSequentialGroup()
                        .add(15, 15, 15)
                        .add(lblVFname2)
                        .add(12, 12, 12)
                        .add(jftSFname, GroupLayout.PREFERRED_SIZE, 150, GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(lblVLname3)
                        .add(8, 8, 8)
                        .add(jtfSLname, GroupLayout.PREFERRED_SIZE, 150, GroupLayout.PREFERRED_SIZE)
                        .add(76, 76, 76)
                        .add(lblVMInitial3)
                        .add(12, 12, 12)
                        .add(txtSMInitial, GroupLayout.PREFERRED_SIZE, 75, GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(lblVDOB3)
                        .add(18, 18, 18)
                        .add(txtSDOB, GroupLayout.PREFERRED_SIZE, 75, GroupLayout.PREFERRED_SIZE))
                    .add(centered4Layout.createSequentialGroup()
                        .add(27, 27, 27)
                        .add(centered4Layout.createParallelGroup(GroupLayout.LEADING, false)
                            .add(centered4Layout.createSequentialGroup()
                                .add(lblVZipcode2)
                                .add(12, 12, 12)
                                .add(txtSZipcode, GroupLayout.PREFERRED_SIZE, 52, GroupLayout.PREFERRED_SIZE)
                                .add(12, 12, 12)
                                .add(lblVEmail2)
                                .add(18, 18, 18)
                                .add(txtSEmail, GroupLayout.PREFERRED_SIZE, 165, GroupLayout.PREFERRED_SIZE)
                                .add(12, 12, 12)
                                .add(jLabel4)
                                .add(12, 12, 12)
                                .add(txtRace3, GroupLayout.PREFERRED_SIZE, 94, GroupLayout.PREFERRED_SIZE)
                                .add(12, 12, 12)
                                .add(genderBox3, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .add(centered4Layout.createSequentialGroup()
                                .add(lblVPhone2)
                                .add(12, 12, 12)
                                .add(txtSPhone, GroupLayout.PREFERRED_SIZE, 99, GroupLayout.PREFERRED_SIZE)
                                .add(69, 69, 69)
                                .add(lblVAddress2)
                                .add(17, 17, 17)
                                .add(txtSAddress, GroupLayout.PREFERRED_SIZE, 214, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.RELATED)
                                .add(lblVCity2)
                                .add(18, 18, 18)
                                .add(txtSCity, GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)))
                        .add(centered4Layout.createParallelGroup(GroupLayout.LEADING)
                            .add(centered4Layout.createSequentialGroup()
                                .add(23, 23, 23)
                                .add(lblVState2)
                                .add(12, 12, 12)
                                .add(txtSState, GroupLayout.PREFERRED_SIZE, 30, GroupLayout.PREFERRED_SIZE))
                            .add(centered4Layout.createSequentialGroup()
                                .add(18, 18, 18)
                                .add(add3, GroupLayout.PREFERRED_SIZE, 75, GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        centered4Layout.setVerticalGroup(centered4Layout.createParallelGroup(GroupLayout.LEADING)
            .add(centered4Layout.createSequentialGroup()
                .add(12, 12, 12)
                .add(centered4Layout.createParallelGroup(GroupLayout.LEADING)
                    .add(jftSFname, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .add(jtfSLname, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .add(txtSMInitial, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .add(txtSDOB, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .add(centered4Layout.createSequentialGroup()
                        .add(2, 2, 2)
                        .add(centered4Layout.createParallelGroup(GroupLayout.LEADING)
                            .add(lblVFname2)
                            .add(lblVLname3)
                            .add(lblVMInitial3)
                            .add(lblVDOB3))))
                .add(12, 12, 12)
                .add(centered4Layout.createParallelGroup(GroupLayout.LEADING)
                    .add(txtSPhone, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .add(txtSAddress, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .add(txtSCity, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .add(txtSState, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .add(centered4Layout.createSequentialGroup()
                        .add(2, 2, 2)
                        .add(centered4Layout.createParallelGroup(GroupLayout.LEADING)
                            .add(lblVPhone2)
                            .add(lblVAddress2)
                            .add(lblVCity2)
                            .add(lblVState2))))
                .add(12, 12, 12)
                .add(centered4Layout.createParallelGroup(GroupLayout.LEADING)
                    .add(centered4Layout.createSequentialGroup()
                        .add(5, 5, 5)
                        .add(lblVZipcode2))
                    .add(centered4Layout.createSequentialGroup()
                        .add(3, 3, 3)
                        .add(txtSZipcode, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                    .add(centered4Layout.createSequentialGroup()
                        .add(5, 5, 5)
                        .add(lblVEmail2))
                    .add(centered4Layout.createSequentialGroup()
                        .add(3, 3, 3)
                        .add(txtSEmail, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                    .add(centered4Layout.createSequentialGroup()
                        .add(5, 5, 5)
                        .add(jLabel4))
                    .add(centered4Layout.createSequentialGroup()
                        .add(3, 3, 3)
                        .add(txtRace3, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                    .add(centered4Layout.createParallelGroup(GroupLayout.BASELINE)
                        .add(genderBox3, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .add(add3)))
                .add(11, 11, 11))
        );

        GroupLayout suspectPaneLayout = new GroupLayout(suspectPane);
        suspectPane.setLayout(suspectPaneLayout);
        suspectPaneLayout.setHorizontalGroup(suspectPaneLayout.createParallelGroup(GroupLayout.LEADING)
            .add(suspectPaneLayout.createSequentialGroup()
                .addContainerGap()
                .add(centered4, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        suspectPaneLayout.setVerticalGroup(suspectPaneLayout.createParallelGroup(GroupLayout.LEADING)
            .add(suspectPaneLayout.createSequentialGroup()
                .addContainerGap()
                .add(centered4, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jtbBasic.addTab(bundle.getString("TestCardLayout.suspectPane.TabConstraints.tabTitle"), suspectPane); // NOI18N
        suspectPane.getAccessibleContext().setAccessibleName(bundle.getString("TestCardLayout.suspectPane.AccessibleContext.accessibleName")); // NOI18N

        evidenceType.setModel(new DefaultComboBoxModel(new String[] { "Evidence Types", "Physical", "Photograph", "Electronic", "Drugs", "Firearms", "Other" }));

        otherEvidence.setEditable(false);
        otherEvidence.setText(bundle.getString("TestCardLayout.otherEvidence.text")); // NOI18N

        lblLocation.setText(bundle.getString("TestCardLayout.lblLocation.text")); // NOI18N

        txtLocation.setText(bundle.getString("TestCardLayout.txtLocation.text")); // NOI18N

        GroupLayout evidencePaneLayout = new GroupLayout(evidencePane);
        evidencePane.setLayout(evidencePaneLayout);
        evidencePaneLayout.setHorizontalGroup(evidencePaneLayout.createParallelGroup(GroupLayout.LEADING)
            .add(evidencePaneLayout.createSequentialGroup()
                .addContainerGap()
                .add(evidencePaneLayout.createParallelGroup(GroupLayout.LEADING, false)
                    .add(evidencePaneLayout.createSequentialGroup()
                        .add(evidenceType, GroupLayout.PREFERRED_SIZE, 120, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.RELATED)
                        .add(otherEvidence, GroupLayout.PREFERRED_SIZE, 85, GroupLayout.PREFERRED_SIZE))
                    .add(evidencePaneLayout.createSequentialGroup()
                        .add(lblLocation)
                        .addPreferredGap(LayoutStyle.UNRELATED)
                        .add(txtLocation)))
                .addContainerGap(616, Short.MAX_VALUE))
        );
        evidencePaneLayout.setVerticalGroup(evidencePaneLayout.createParallelGroup(GroupLayout.LEADING)
            .add(evidencePaneLayout.createSequentialGroup()
                .addContainerGap()
                .add(evidencePaneLayout.createParallelGroup(GroupLayout.BASELINE)
                    .add(evidenceType, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .add(otherEvidence, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(evidencePaneLayout.createParallelGroup(GroupLayout.BASELINE)
                    .add(lblLocation)
                    .add(txtLocation, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addContainerGap(133, Short.MAX_VALUE))
        );

        jtbBasic.addTab(bundle.getString("TestCardLayout.evidencePane.TabConstraints.tabTitle"), evidencePane); // NOI18N

        vehicleType.setModel(new DefaultComboBoxModel(new String[] { "Vehicle Type", "Boat", "Car", "Motorcyle", "Van", "Other" }));
        vehicleType.setToolTipText(bundle.getString("TestCardLayout.vehicleType.toolTipText")); // NOI18N
        vehicleType.addItemListener(formListener);

        otherVehicle.setEditable(false);
        otherVehicle.setText(bundle.getString("TestCardLayout.otherVehicle.text")); // NOI18N

        txtMake.setText(bundle.getString("TestCardLayout.txtMake.text")); // NOI18N

        lblMake.setText(bundle.getString("TestCardLayout.lblMake.text")); // NOI18N

        lblModel.setText(bundle.getString("TestCardLayout.lblModel.text")); // NOI18N

        txtModel.setText(bundle.getString("TestCardLayout.txtModel.text")); // NOI18N

        lblColor.setText(bundle.getString("TestCardLayout.lblColor.text")); // NOI18N

        txtColor.setText(bundle.getString("TestCardLayout.txtColor.text")); // NOI18N
        txtColor.addActionListener(formListener);

        lblYear.setText(bundle.getString("TestCardLayout.lblYear.text")); // NOI18N

        txtYear.setText(bundle.getString("TestCardLayout.txtYear.text")); // NOI18N

        lblVIN.setText(bundle.getString("TestCardLayout.lblVIN.text")); // NOI18N

        txtVIN.setText(bundle.getString("TestCardLayout.txtVIN.text")); // NOI18N

        lblLicenseNum.setText(bundle.getString("TestCardLayout.lblLicenseNum.text")); // NOI18N

        txtLicenseNum.setText(bundle.getString("TestCardLayout.txtLicenseNum.text")); // NOI18N

        lblLastSeen.setText(bundle.getString("TestCardLayout.lblLastSeen.text")); // NOI18N

        txtLastSeen.setText(bundle.getString("TestCardLayout.txtLastSeen.text")); // NOI18N

        lblDirection.setText(bundle.getString("TestCardLayout.lblDirection.text")); // NOI18N

        txtDirection.setText(bundle.getString("TestCardLayout.txtDirection.text")); // NOI18N

        GroupLayout vehiclePaneLayout = new GroupLayout(vehiclePane);
        vehiclePane.setLayout(vehiclePaneLayout);
        vehiclePaneLayout.setHorizontalGroup(vehiclePaneLayout.createParallelGroup(GroupLayout.LEADING)
            .add(vehiclePaneLayout.createSequentialGroup()
                .add(61, 61, 61)
                .add(vehiclePaneLayout.createParallelGroup(GroupLayout.LEADING, false)
                    .add(vehiclePaneLayout.createSequentialGroup()
                        .add(lblLastSeen)
                        .addPreferredGap(LayoutStyle.UNRELATED)
                        .add(txtLastSeen))
                    .add(vehiclePaneLayout.createSequentialGroup()
                        .add(lblVIN)
                        .addPreferredGap(LayoutStyle.UNRELATED)
                        .add(txtVIN))
                    .add(vehiclePaneLayout.createSequentialGroup()
                        .add(vehicleType, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.UNRELATED)
                        .add(otherVehicle, GroupLayout.PREFERRED_SIZE, 80, GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(LayoutStyle.UNRELATED)
                .add(vehiclePaneLayout.createParallelGroup(GroupLayout.LEADING, false)
                    .add(vehiclePaneLayout.createSequentialGroup()
                        .add(vehiclePaneLayout.createParallelGroup(GroupLayout.LEADING, false)
                            .add(vehiclePaneLayout.createSequentialGroup()
                                .add(lblMake)
                                .addPreferredGap(LayoutStyle.UNRELATED)
                                .add(txtMake, GroupLayout.PREFERRED_SIZE, 75, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.UNRELATED)
                                .add(lblModel))
                            .add(vehiclePaneLayout.createSequentialGroup()
                                .add(lblLicenseNum)
                                .addPreferredGap(LayoutStyle.UNRELATED)
                                .add(txtLicenseNum)))
                        .addPreferredGap(LayoutStyle.UNRELATED)
                        .add(txtModel, GroupLayout.PREFERRED_SIZE, 75, GroupLayout.PREFERRED_SIZE))
                    .add(vehiclePaneLayout.createSequentialGroup()
                        .add(lblDirection)
                        .addPreferredGap(LayoutStyle.UNRELATED)
                        .add(txtDirection)))
                .addPreferredGap(LayoutStyle.UNRELATED)
                .add(lblColor)
                .addPreferredGap(LayoutStyle.UNRELATED)
                .add(txtColor, GroupLayout.PREFERRED_SIZE, 75, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.UNRELATED)
                .add(lblYear)
                .addPreferredGap(LayoutStyle.UNRELATED)
                .add(txtYear, GroupLayout.PREFERRED_SIZE, 60, GroupLayout.PREFERRED_SIZE)
                .add(62, 62, 62))
        );
        vehiclePaneLayout.setVerticalGroup(vehiclePaneLayout.createParallelGroup(GroupLayout.LEADING)
            .add(vehiclePaneLayout.createSequentialGroup()
                .addContainerGap()
                .add(vehiclePaneLayout.createParallelGroup(GroupLayout.BASELINE)
                    .add(vehicleType, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .add(otherVehicle, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .add(txtMake, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .add(lblMake)
                    .add(lblModel)
                    .add(txtModel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .add(lblColor)
                    .add(txtColor, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .add(lblYear)
                    .add(txtYear, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(vehiclePaneLayout.createParallelGroup(GroupLayout.BASELINE)
                    .add(lblVIN)
                    .add(txtVIN, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .add(lblLicenseNum)
                    .add(txtLicenseNum, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(vehiclePaneLayout.createParallelGroup(GroupLayout.BASELINE)
                    .add(lblLastSeen)
                    .add(txtLastSeen, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .add(lblDirection)
                    .add(txtDirection, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addContainerGap(96, Short.MAX_VALUE))
        );

        jtbBasic.addTab(bundle.getString("TestCardLayout.vehiclePane.TabConstraints.tabTitle"), vehiclePane); // NOI18N

        jftOFname.setHorizontalAlignment(JTextField.LEFT);
        jftOFname.setMinimumSize(new Dimension(50, 27));
        jftOFname.addFocusListener(formListener);

        lblVLname5.setText(bundle.getString("TestCardLayout.lblVLname5.text")); // NOI18N

        jtfOLname.addFocusListener(formListener);

        txtOMInitial.addFocusListener(formListener);

        lblVDOB5.setText(bundle.getString("TestCardLayout.lblVDOB5.text")); // NOI18N

        txtODOB.addFocusListener(formListener);

        lblVMInitial5.setText(bundle.getString("TestCardLayout.lblVMInitial5.text")); // NOI18N

        lblVFname4.setText(bundle.getString("TestCardLayout.lblVFname4.text")); // NOI18N

        lblVPhone4.setText(bundle.getString("TestCardLayout.lblVPhone4.text")); // NOI18N

        txtOPhone.setText(bundle.getString("TestCardLayout.txtOPhone.text")); // NOI18N
        txtOPhone.setMinimumSize(new Dimension(50, 18));
        txtOPhone.addFocusListener(formListener);

        lblVAddress4.setText(bundle.getString("TestCardLayout.lblVAddress4.text")); // NOI18N

        txtOAddress.addFocusListener(formListener);

        lblVCity4.setText(bundle.getString("TestCardLayout.lblVCity4.text")); // NOI18N

        txtOCity.addFocusListener(formListener);

        lblVState4.setText(bundle.getString("TestCardLayout.lblVState4.text")); // NOI18N

        txtOState.addFocusListener(formListener);

        lblVZipcode4.setText(bundle.getString("TestCardLayout.lblVZipcode4.text")); // NOI18N

        txtOZipcode.setMinimumSize(new Dimension(10, 18));
        txtOZipcode.addFocusListener(formListener);

        lblVEmail4.setText(bundle.getString("TestCardLayout.lblVEmail4.text")); // NOI18N

        txtOEmail.addFocusListener(formListener);

        agencyCB.setModel(new DefaultComboBoxModel<>(agencies));

        add4.setText(bundle.getString("TestCardLayout.add4.text")); // NOI18N
        add4.setHorizontalTextPosition(SwingConstants.CENTER);
        add4.addActionListener(formListener);

        GroupLayout jPanel1Layout = new GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(jPanel1Layout.createParallelGroup(GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(15, 15, 15)
                .add(jPanel1Layout.createParallelGroup(GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(agencyCB, GroupLayout.PREFERRED_SIZE, 150, GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(add4, GroupLayout.PREFERRED_SIZE, 75, GroupLayout.PREFERRED_SIZE))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(GroupLayout.LEADING)
                            .add(lblVFname4)
                            .add(GroupLayout.TRAILING, lblVPhone4)
                            .add(GroupLayout.TRAILING, lblVZipcode4))
                        .addPreferredGap(LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(GroupLayout.LEADING)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(jPanel1Layout.createParallelGroup(GroupLayout.LEADING, false)
                                    .add(jftOFname, GroupLayout.PREFERRED_SIZE, 150, GroupLayout.PREFERRED_SIZE)
                                    .add(txtOPhone, GroupLayout.PREFERRED_SIZE, 99, GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(LayoutStyle.UNRELATED)
                                .add(jPanel1Layout.createParallelGroup(GroupLayout.LEADING)
                                    .add(lblVLname5)
                                    .add(lblVAddress4))
                                .add(8, 8, 8)
                                .add(jPanel1Layout.createParallelGroup(GroupLayout.LEADING, false)
                                    .add(jPanel1Layout.createSequentialGroup()
                                        .add(jtfOLname, GroupLayout.PREFERRED_SIZE, 150, GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(LayoutStyle.RELATED, 77, Short.MAX_VALUE)
                                        .add(lblVMInitial5)
                                        .addPreferredGap(LayoutStyle.RELATED)
                                        .add(txtOMInitial, GroupLayout.PREFERRED_SIZE, 75, GroupLayout.PREFERRED_SIZE))
                                    .add(jPanel1Layout.createSequentialGroup()
                                        .add(txtOAddress)
                                        .addPreferredGap(LayoutStyle.UNRELATED)
                                        .add(lblVCity4)
                                        .addPreferredGap(LayoutStyle.UNRELATED)
                                        .add(txtOCity, GroupLayout.PREFERRED_SIZE, 113, GroupLayout.PREFERRED_SIZE)))
                                .add(jPanel1Layout.createParallelGroup(GroupLayout.LEADING)
                                    .add(jPanel1Layout.createSequentialGroup()
                                        .addPreferredGap(LayoutStyle.UNRELATED)
                                        .add(lblVDOB5)
                                        .add(18, 18, 18)
                                        .add(txtODOB, GroupLayout.PREFERRED_SIZE, 75, GroupLayout.PREFERRED_SIZE))
                                    .add(GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .add(4, 4, 4)
                                        .add(lblVState4)
                                        .addPreferredGap(LayoutStyle.RELATED)
                                        .add(txtOState, GroupLayout.PREFERRED_SIZE, 30, GroupLayout.PREFERRED_SIZE))))
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(txtOZipcode, GroupLayout.PREFERRED_SIZE, 52, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.RELATED)
                                .add(lblVEmail4)
                                .addPreferredGap(LayoutStyle.UNRELATED)
                                .add(txtOEmail, GroupLayout.PREFERRED_SIZE, 165, GroupLayout.PREFERRED_SIZE)))))
                .add(49, 49, 49))
        );
        jPanel1Layout.setVerticalGroup(jPanel1Layout.createParallelGroup(GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(GroupLayout.BASELINE)
                    .add(agencyCB, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .add(add4))
                .addPreferredGap(LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(GroupLayout.LEADING)
                    .add(jPanel1Layout.createParallelGroup(GroupLayout.BASELINE)
                        .add(txtOMInitial, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .add(lblVMInitial5))
                    .add(jPanel1Layout.createParallelGroup(GroupLayout.BASELINE)
                        .add(txtODOB, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .add(lblVDOB5))
                    .add(jPanel1Layout.createParallelGroup(GroupLayout.BASELINE)
                        .add(lblVFname4)
                        .add(jftOFname, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .add(lblVLname5)
                        .add(jtfOLname, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(LayoutStyle.UNRELATED)
                .add(jPanel1Layout.createParallelGroup(GroupLayout.LEADING)
                    .add(txtOPhone, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .add(jPanel1Layout.createParallelGroup(GroupLayout.BASELINE)
                        .add(lblVAddress4)
                        .add(txtOAddress, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .add(lblVCity4)
                        .add(txtOCity, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .add(lblVState4)
                        .add(txtOState, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .add(lblVPhone4)))
                .addPreferredGap(LayoutStyle.UNRELATED)
                .add(jPanel1Layout.createParallelGroup(GroupLayout.BASELINE)
                    .add(lblVZipcode4)
                    .add(txtOZipcode, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .add(lblVEmail4)
                    .add(txtOEmail, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        GroupLayout otherPaneLayout = new GroupLayout(otherPane);
        otherPane.setLayout(otherPaneLayout);
        otherPaneLayout.setHorizontalGroup(otherPaneLayout.createParallelGroup(GroupLayout.LEADING)
            .add(otherPaneLayout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, GroupLayout.PREFERRED_SIZE, 821, Short.MAX_VALUE)
                .addContainerGap())
        );
        otherPaneLayout.setVerticalGroup(otherPaneLayout.createParallelGroup(GroupLayout.LEADING)
            .add(otherPaneLayout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jtbBasic.addTab(bundle.getString("TestCardLayout.otherPane.TabConstraints.tabTitle"), otherPane); // NOI18N

        pane1.add(jtbBasic);

        mainPanel.add(pane1, "card1");
        pane1.getAccessibleContext().setAccessibleName(bundle.getString("TestCardLayout.pane1.AccessibleContext.accessibleName")); // NOI18N

        pane2.setBorder(BorderFactory.createMatteBorder(2, 2, 2, 2, new Color(0, 0, 0)));

        dateVenueScroll.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        dateVenueScroll.setAutoscrolls(true);
        dateVenueScroll.setHorizontalScrollBar(null);
        dateVenueScroll.setRequestFocusEnabled(false);

        txtAreaDateVenue.setColumns(20);
        txtAreaDateVenue.setLineWrap(true);
        txtAreaDateVenue.setRows(5);
        txtAreaDateVenue.setWrapStyleWord(true);
        txtAreaDateVenue.setAutoscrolls(false);
        dateVenueScroll.setViewportView(txtAreaDateVenue);

        txtAreaInfo.setColumns(20);
        txtAreaInfo.setLineWrap(true);
        txtAreaInfo.setRows(5);
        txtAreaInfo.setTabSize(4);
        txtAreaInfo.setText(bundle.getString("TestCardLayout.txtAreaInfo.text")); // NOI18N
        txtAreaInfo.setWrapStyleWord(true);
        informationScroll.setViewportView(txtAreaInfo);

        lblDateVenue.setFont(new Font("Dialog", 0, 14)); // NOI18N
        lblDateVenue.setText(bundle.getString("TestCardLayout.lblDateVenue.text")); // NOI18N

        lblBackground.setFont(new Font("Dialog", 0, 14)); // NOI18N
        lblBackground.setText(bundle.getString("TestCardLayout.lblBackground.text")); // NOI18N

        GroupLayout pane2Layout = new GroupLayout(pane2);
        pane2.setLayout(pane2Layout);
        pane2Layout.setHorizontalGroup(pane2Layout.createParallelGroup(GroupLayout.LEADING)
            .add(pane2Layout.createSequentialGroup()
                .addContainerGap()
                .add(pane2Layout.createParallelGroup(GroupLayout.LEADING)
                    .add(informationScroll, GroupLayout.DEFAULT_SIZE, 826, Short.MAX_VALUE)
                    .add(pane2Layout.createSequentialGroup()
                        .add(lblDateVenue)
                        .addPreferredGap(LayoutStyle.RELATED)
                        .add(dateVenueScroll, GroupLayout.PREFERRED_SIZE, 354, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.RELATED)
                        .add(lblBackground)
                        .add(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pane2Layout.setVerticalGroup(pane2Layout.createParallelGroup(GroupLayout.LEADING)
            .add(GroupLayout.TRAILING, pane2Layout.createSequentialGroup()
                .addContainerGap()
                .add(pane2Layout.createParallelGroup(GroupLayout.LEADING)
                    .add(dateVenueScroll, GroupLayout.PREFERRED_SIZE, 66, GroupLayout.PREFERRED_SIZE)
                    .add(lblDateVenue)
                    .add(GroupLayout.TRAILING, lblBackground))
                .addPreferredGap(LayoutStyle.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(informationScroll, GroupLayout.PREFERRED_SIZE, 164, GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        mainPanel.add(pane2, "card2");

        pane3.setBorder(BorderFactory.createMatteBorder(2, 2, 2, 2, new Color(0, 0, 0)));

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        GroupLayout pane3Layout = new GroupLayout(pane3);
        pane3.setLayout(pane3Layout);
        pane3Layout.setHorizontalGroup(pane3Layout.createParallelGroup(GroupLayout.LEADING)
            .add(pane3Layout.createSequentialGroup()
                .add(114, 114, 114)
                .add(jScrollPane2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(573, Short.MAX_VALUE))
        );
        pane3Layout.setVerticalGroup(pane3Layout.createParallelGroup(GroupLayout.LEADING)
            .add(GroupLayout.TRAILING, pane3Layout.createSequentialGroup()
                .addContainerGap(92, Short.MAX_VALUE)
                .add(jScrollPane2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .add(81, 81, 81))
        );

        mainPanel.add(pane3, "card3");

        helpMenu.setText(bundle.getString("TestCardLayout.helpMenu.text")); // NOI18N
        helpMenu.addActionListener(formListener);

        help.setText(bundle.getString("TestCardLayout.help.text")); // NOI18N
        help.addActionListener(formListener);
        helpMenu.add(help);

        MenuBar.add(helpMenu);

        aboutMenu.setText(bundle.getString("TestCardLayout.aboutMenu.text")); // NOI18N
        MenuBar.add(aboutMenu);

        setJMenuBar(MenuBar);

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.LEADING)
            .add(mainPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(layout.createParallelGroup(GroupLayout.LEADING)
                .add(buttonPanel, GroupLayout.DEFAULT_SIZE, 854, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(mainPanel, GroupLayout.PREFERRED_SIZE, 255, GroupLayout.PREFERRED_SIZE)
                .add(0, 99, Short.MAX_VALUE))
            .add(layout.createParallelGroup(GroupLayout.LEADING)
                .add(GroupLayout.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(249, Short.MAX_VALUE)
                    .add(buttonPanel, GroupLayout.PREFERRED_SIZE, 86, GroupLayout.PREFERRED_SIZE)
                    .add(19, 19, 19)))
        );

        pack();
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements ActionListener, FocusListener, ItemListener, KeyListener
    {
        FormListener() {}
        public void actionPerformed(ActionEvent evt)
        {
            if (evt.getSource() == btnDone)
            {
                TestCardLayout.this.btnDoneActionPerformed(evt);
            }
            else if (evt.getSource() == btnSave)
            {
                TestCardLayout.this.btnSaveActionPerformed(evt);
            }
            else if (evt.getSource() == txtRace)
            {
                TestCardLayout.this.txtRaceActionPerformed(evt);
            }
            else if (evt.getSource() == add)
            {
                TestCardLayout.this.addActionPerformed(evt);
            }
            else if (evt.getSource() == txtRace1)
            {
                TestCardLayout.this.txtRace1ActionPerformed(evt);
            }
            else if (evt.getSource() == add1)
            {
                TestCardLayout.this.add1ActionPerformed(evt);
            }
            else if (evt.getSource() == txtRace2)
            {
                TestCardLayout.this.txtRace2ActionPerformed(evt);
            }
            else if (evt.getSource() == add2)
            {
                TestCardLayout.this.add2ActionPerformed(evt);
            }
            else if (evt.getSource() == txtRace3)
            {
                TestCardLayout.this.txtRace3ActionPerformed(evt);
            }
            else if (evt.getSource() == add3)
            {
                TestCardLayout.this.add3ActionPerformed(evt);
            }
            else if (evt.getSource() == add4)
            {
                TestCardLayout.this.add4ActionPerformed(evt);
            }
            else if (evt.getSource() == helpMenu)
            {
                TestCardLayout.this.helpMenuActionPerformed(evt);
            }
            else if (evt.getSource() == help)
            {
                TestCardLayout.this.helpActionPerformed(evt);
            }
            else if (evt.getSource() == txtColor)
            {
                TestCardLayout.this.txtColorActionPerformed(evt);
            }
        }

        public void focusGained(FocusEvent evt)
        {
            if (evt.getSource() == txtDateOfOffense)
            {
                TestCardLayout.this.generalTxtFocusGained(evt);
            }
            else if (evt.getSource() == jftCFname)
            {
                TestCardLayout.this.generalTxtFocusGained(evt);
            }
            else if (evt.getSource() == jtfCLname)
            {
                TestCardLayout.this.generalTxtFocusGained(evt);
            }
            else if (evt.getSource() == txtCMInitial)
            {
                TestCardLayout.this.generalTxtFocusGained(evt);
            }
            else if (evt.getSource() == txtCDOB)
            {
                TestCardLayout.this.generalTxtFocusGained(evt);
            }
            else if (evt.getSource() == txtCState)
            {
                TestCardLayout.this.generalTxtFocusGained(evt);
            }
            else if (evt.getSource() == txtCCity)
            {
                TestCardLayout.this.generalTxtFocusGained(evt);
            }
            else if (evt.getSource() == txtCAddress)
            {
                TestCardLayout.this.generalTxtFocusGained(evt);
            }
            else if (evt.getSource() == txtCPhone)
            {
                TestCardLayout.this.generalTxtFocusGained(evt);
            }
            else if (evt.getSource() == txtCZipcode)
            {
                TestCardLayout.this.generalTxtFocusGained(evt);
            }
            else if (evt.getSource() == txtCEmail)
            {
                TestCardLayout.this.generalTxtFocusGained(evt);
            }
            else if (evt.getSource() == jftVFname)
            {
                TestCardLayout.this.generalTxtFocusGained(evt);
            }
            else if (evt.getSource() == txtVPhone)
            {
                TestCardLayout.this.generalTxtFocusGained(evt);
            }
            else if (evt.getSource() == txtVZipcode)
            {
                TestCardLayout.this.generalTxtFocusGained(evt);
            }
            else if (evt.getSource() == txtVEmail)
            {
                TestCardLayout.this.generalTxtFocusGained(evt);
            }
            else if (evt.getSource() == jtfVLname)
            {
                TestCardLayout.this.generalTxtFocusGained(evt);
            }
            else if (evt.getSource() == txtVAddress)
            {
                TestCardLayout.this.generalTxtFocusGained(evt);
            }
            else if (evt.getSource() == txtVMInitial)
            {
                TestCardLayout.this.generalTxtFocusGained(evt);
            }
            else if (evt.getSource() == txtVDOB)
            {
                TestCardLayout.this.generalTxtFocusGained(evt);
            }
            else if (evt.getSource() == txtVState)
            {
                TestCardLayout.this.generalTxtFocusGained(evt);
            }
            else if (evt.getSource() == txtVCity)
            {
                TestCardLayout.this.generalTxtFocusGained(evt);
            }
            else if (evt.getSource() == jftWFname)
            {
                TestCardLayout.this.generalTxtFocusGained(evt);
            }
            else if (evt.getSource() == jtfWLname)
            {
                TestCardLayout.this.generalTxtFocusGained(evt);
            }
            else if (evt.getSource() == txtWDOB)
            {
                TestCardLayout.this.generalTxtFocusGained(evt);
            }
            else if (evt.getSource() == txtWPhone)
            {
                TestCardLayout.this.generalTxtFocusGained(evt);
            }
            else if (evt.getSource() == txtWAddress)
            {
                TestCardLayout.this.generalTxtFocusGained(evt);
            }
            else if (evt.getSource() == txtWCity)
            {
                TestCardLayout.this.generalTxtFocusGained(evt);
            }
            else if (evt.getSource() == txtWState)
            {
                TestCardLayout.this.generalTxtFocusGained(evt);
            }
            else if (evt.getSource() == txtWZipcode)
            {
                TestCardLayout.this.generalTxtFocusGained(evt);
            }
            else if (evt.getSource() == txtWEmail)
            {
                TestCardLayout.this.generalTxtFocusGained(evt);
            }
            else if (evt.getSource() == jftSFname)
            {
                TestCardLayout.this.generalTxtFocusGained(evt);
            }
            else if (evt.getSource() == jtfSLname)
            {
                TestCardLayout.this.generalTxtFocusGained(evt);
            }
            else if (evt.getSource() == txtSMInitial)
            {
                TestCardLayout.this.generalTxtFocusGained(evt);
            }
            else if (evt.getSource() == txtSDOB)
            {
                TestCardLayout.this.generalTxtFocusGained(evt);
            }
            else if (evt.getSource() == txtSPhone)
            {
                TestCardLayout.this.generalTxtFocusGained(evt);
            }
            else if (evt.getSource() == txtSAddress)
            {
                TestCardLayout.this.generalTxtFocusGained(evt);
            }
            else if (evt.getSource() == txtSCity)
            {
                TestCardLayout.this.generalTxtFocusGained(evt);
            }
            else if (evt.getSource() == txtSState)
            {
                TestCardLayout.this.generalTxtFocusGained(evt);
            }
            else if (evt.getSource() == txtSZipcode)
            {
                TestCardLayout.this.generalTxtFocusGained(evt);
            }
            else if (evt.getSource() == txtSEmail)
            {
                TestCardLayout.this.generalTxtFocusGained(evt);
            }
            else if (evt.getSource() == jftOFname)
            {
                TestCardLayout.this.generalTxtFocusGained(evt);
            }
            else if (evt.getSource() == jtfOLname)
            {
                TestCardLayout.this.generalTxtFocusGained(evt);
            }
            else if (evt.getSource() == txtOMInitial)
            {
                TestCardLayout.this.generalTxtFocusGained(evt);
            }
            else if (evt.getSource() == txtODOB)
            {
                TestCardLayout.this.generalTxtFocusGained(evt);
            }
            else if (evt.getSource() == txtOPhone)
            {
                TestCardLayout.this.generalTxtFocusGained(evt);
            }
            else if (evt.getSource() == txtOAddress)
            {
                TestCardLayout.this.generalTxtFocusGained(evt);
            }
            else if (evt.getSource() == txtOCity)
            {
                TestCardLayout.this.generalTxtFocusGained(evt);
            }
            else if (evt.getSource() == txtOZipcode)
            {
                TestCardLayout.this.generalTxtFocusGained(evt);
            }
            else if (evt.getSource() == txtOEmail)
            {
                TestCardLayout.this.generalTxtFocusGained(evt);
            }
        }

        public void focusLost(FocusEvent evt)
        {
            if (evt.getSource() == complaintNum)
            {
                TestCardLayout.this.generalTxtFocusLost(evt);
            }
            else if (evt.getSource() == txtDateOfOffense)
            {
                TestCardLayout.this.generalTxtFocusLost(evt);
            }
            else if (evt.getSource() == txtCDOB)
            {
                TestCardLayout.this.generalTxtFocusLost(evt);
            }
            else if (evt.getSource() == txtCState)
            {
                TestCardLayout.this.generalTxtFocusLost(evt);
            }
            else if (evt.getSource() == txtCCity)
            {
                TestCardLayout.this.generalTxtFocusLost(evt);
            }
            else if (evt.getSource() == txtCAddress)
            {
                TestCardLayout.this.generalTxtFocusLost(evt);
            }
            else if (evt.getSource() == txtCPhone)
            {
                TestCardLayout.this.generalTxtFocusLost(evt);
            }
            else if (evt.getSource() == txtCZipcode)
            {
                TestCardLayout.this.generalTxtFocusLost(evt);
            }
            else if (evt.getSource() == txtCEmail)
            {
                TestCardLayout.this.generalTxtFocusLost(evt);
            }
            else if (evt.getSource() == jftVFname)
            {
                TestCardLayout.this.generalTxtFocusLost(evt);
            }
            else if (evt.getSource() == txtVPhone)
            {
                TestCardLayout.this.generalTxtFocusLost(evt);
            }
            else if (evt.getSource() == txtVZipcode)
            {
                TestCardLayout.this.generalTxtFocusLost(evt);
            }
            else if (evt.getSource() == txtVEmail)
            {
                TestCardLayout.this.generalTxtFocusLost(evt);
            }
            else if (evt.getSource() == jtfVLname)
            {
                TestCardLayout.this.generalTxtFocusLost(evt);
            }
            else if (evt.getSource() == txtVAddress)
            {
                TestCardLayout.this.generalTxtFocusLost(evt);
            }
            else if (evt.getSource() == txtVMInitial)
            {
                TestCardLayout.this.generalTxtFocusLost(evt);
            }
            else if (evt.getSource() == txtVDOB)
            {
                TestCardLayout.this.generalTxtFocusLost(evt);
            }
            else if (evt.getSource() == txtVState)
            {
                TestCardLayout.this.generalTxtFocusLost(evt);
            }
            else if (evt.getSource() == txtVCity)
            {
                TestCardLayout.this.generalTxtFocusLost(evt);
            }
            else if (evt.getSource() == jftWFname)
            {
                TestCardLayout.this.generalTxtFocusLost(evt);
            }
            else if (evt.getSource() == jtfWLname)
            {
                TestCardLayout.this.generalTxtFocusLost(evt);
            }
            else if (evt.getSource() == txtWMInitial)
            {
                TestCardLayout.this.generalTxtFocusLost(evt);
            }
            else if (evt.getSource() == txtWDOB)
            {
                TestCardLayout.this.generalTxtFocusLost(evt);
            }
            else if (evt.getSource() == txtWPhone)
            {
                TestCardLayout.this.generalTxtFocusLost(evt);
            }
            else if (evt.getSource() == txtWAddress)
            {
                TestCardLayout.this.generalTxtFocusLost(evt);
            }
            else if (evt.getSource() == txtWCity)
            {
                TestCardLayout.this.generalTxtFocusLost(evt);
            }
            else if (evt.getSource() == txtWState)
            {
                TestCardLayout.this.generalTxtFocusLost(evt);
            }
            else if (evt.getSource() == txtWZipcode)
            {
                TestCardLayout.this.generalTxtFocusLost(evt);
            }
            else if (evt.getSource() == txtWEmail)
            {
                TestCardLayout.this.generalTxtFocusLost(evt);
            }
            else if (evt.getSource() == jftSFname)
            {
                TestCardLayout.this.generalTxtFocusLost(evt);
            }
            else if (evt.getSource() == jtfSLname)
            {
                TestCardLayout.this.generalTxtFocusLost(evt);
            }
            else if (evt.getSource() == txtSMInitial)
            {
                TestCardLayout.this.generalTxtFocusLost(evt);
            }
            else if (evt.getSource() == txtSDOB)
            {
                TestCardLayout.this.generalTxtFocusLost(evt);
            }
            else if (evt.getSource() == txtSPhone)
            {
                TestCardLayout.this.generalTxtFocusLost(evt);
            }
            else if (evt.getSource() == txtSAddress)
            {
                TestCardLayout.this.generalTxtFocusLost(evt);
            }
            else if (evt.getSource() == txtSCity)
            {
                TestCardLayout.this.generalTxtFocusLost(evt);
            }
            else if (evt.getSource() == txtSState)
            {
                TestCardLayout.this.generalTxtFocusLost(evt);
            }
            else if (evt.getSource() == txtSZipcode)
            {
                TestCardLayout.this.generalTxtFocusLost(evt);
            }
            else if (evt.getSource() == txtSEmail)
            {
                TestCardLayout.this.generalTxtFocusLost(evt);
            }
            else if (evt.getSource() == jftOFname)
            {
                TestCardLayout.this.generalTxtFocusLost(evt);
            }
            else if (evt.getSource() == jtfOLname)
            {
                TestCardLayout.this.generalTxtFocusLost(evt);
            }
            else if (evt.getSource() == txtOMInitial)
            {
                TestCardLayout.this.generalTxtFocusLost(evt);
            }
            else if (evt.getSource() == txtODOB)
            {
                TestCardLayout.this.generalTxtFocusLost(evt);
            }
            else if (evt.getSource() == txtOPhone)
            {
                TestCardLayout.this.generalTxtFocusLost(evt);
            }
            else if (evt.getSource() == txtOAddress)
            {
                TestCardLayout.this.generalTxtFocusLost(evt);
            }
            else if (evt.getSource() == txtOCity)
            {
                TestCardLayout.this.generalTxtFocusLost(evt);
            }
            else if (evt.getSource() == txtOState)
            {
                TestCardLayout.this.generalTxtFocusLost(evt);
            }
            else if (evt.getSource() == txtOZipcode)
            {
                TestCardLayout.this.generalTxtFocusLost(evt);
            }
            else if (evt.getSource() == txtOEmail)
            {
                TestCardLayout.this.generalTxtFocusLost(evt);
            }
        }

        public void itemStateChanged(ItemEvent evt)
        {
            if (evt.getSource() == FileCode)
            {
                TestCardLayout.this.FileCodeItemStateChanged(evt);
            }
            else if (evt.getSource() == vehicleType)
            {
                TestCardLayout.this.vehicleTypeItemStateChanged(evt);
            }
        }

        public void keyPressed(KeyEvent evt)
        {
            if (evt.getSource() == btnDone)
            {
                TestCardLayout.this.btnDoneKeyPressed(evt);
            }
            else if (evt.getSource() == btnSave)
            {
                TestCardLayout.this.btnSaveKeyPressed(evt);
            }
        }

        public void keyReleased(KeyEvent evt)
        {
        }

        public void keyTyped(KeyEvent evt)
        {
        }
    }// </editor-fold>//GEN-END:initComponents

    private void btnDoneActionPerformed(ActionEvent evt)//GEN-FIRST:event_btnDoneActionPerformed
    {//GEN-HEADEREND:event_btnDoneActionPerformed
        int input = 2;
        input = JOptionPane.showConfirmDialog(null, "Do you want to Quit?", "Select an Option...",
                        JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

        LocalDateTime now = LocalDateTime.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");

        String date = now.format(formatter);
        String month = date.split("-")[1]; 
        String year = date.split("-")[0];
        String day = date.split("-")[2];
        String first = "";
        String last = "";
        String name = "";
        
        if (day.length() != 2)
        {
            day = "0" + day;
        }  
        if (month.length() != 2)
        {
            month = "0" + month;
        }
        
        date =  month + "/" + day + "/" + year;
        
        if (!txtOficerInCharge.getText().trim().equals("") && txtOficerInCharge.getText().trim().contains(" "))
        {
            first = txtOficerInCharge.getText().split(" ")[0];
            System.out.println(first);
            last = txtOficerInCharge.getText().split(" ")[1];
            name = last + ", " + first;
        }
        else
        {
            name = "Doe" + ", " + "John";
        }

        if (input == 0)
        {
            try
            {
                printer();
                DocxWriter.sectionDivider(name, date);
                DocxWriter.writeInformation("INFORMATION");
                DocxWriter.writeInformation("DATE");
                DocxWriter.writeInformation("VENUE");
                
                DocxWriter.writeInformation("Complainant".toUpperCase());
                for (int e = 0; e < element; e++)
                {
                    if (Heading.get(e).contains("Complainant"))
                    {
                        DocxWriter.writeHeadings(Heading.get(e).toUpperCase(), Name.get(e).toUpperCase());
                    }
                }
                
                DocxWriter.writeInformation("Victim".toUpperCase());
                for (int e = 0; e < element; e++)
                {
                    if (Heading.get(e).contains("Victim"))
                    {
                        DocxWriter.writeHeadings(Heading.get(e).toUpperCase(), Name.get(e).toUpperCase());
                    }
                }
                
                DocxWriter.writeInformation("witness".toUpperCase());
                for (int e = 0; e < element; e++)
                {
                    if (Heading.get(e).contains("Witness"))
                    {
                        DocxWriter.writeHeadings(Heading.get(e).toUpperCase(), Name.get(e).toUpperCase());
                    }
                }
                
                DocxWriter.writeInformation("suspect".toUpperCase());
                for (int e = 0; e < element; e++)
                {
                    if (Heading.get(e).contains("Suspect"))
                    {
                        DocxWriter.writeHeadings(Heading.get(e).toUpperCase(), Name.get(e).toUpperCase());
                    }
                }
                
                DocxWriter.writeInformation("Other".toUpperCase());
                for (int e = 0; e < element; e++)
                {
                    if (!Heading.get(e).contains("Suspect") && 
                        !Heading.get(e).contains("Witness") &&
                        !Heading.get(e).contains("Victim")  &&
                        !Heading.get(e).contains("Complainant"))
                    {
                        DocxWriter.writeHeadings(Heading.get(e).toUpperCase(), Name.get(e).toUpperCase());
                    }
                }
                
                DocxWriter.writeContentFileEnd();
                DocxWriter.createDOCXArchive();
            }
            catch (FileNotFoundException ex)
            {
                Logger.getLogger(TestCardLayout.class.getName()).log(Level.SEVERE, null, ex);
            }
            catch (IOException ex)
            {
                Logger.getLogger(TestCardLayout.class.getName()).log(Level.SEVERE, null, ex);
            }

            System.exit(0);
        }
    }//GEN-LAST:event_btnDoneActionPerformed

    private void btnDoneKeyPressed(KeyEvent evt)//GEN-FIRST:event_btnDoneKeyPressed
    {//GEN-HEADEREND:event_btnDoneKeyPressed

    }//GEN-LAST:event_btnDoneKeyPressed

    private void btnSaveActionPerformed(ActionEvent evt)//GEN-FIRST:event_btnSaveActionPerformed
    {//GEN-HEADEREND:event_btnSaveActionPerformed
        int titleNum = jtbBasic.getSelectedIndex();
        
        String comp = complaintNum.getText().trim();
        String code = FileCode.getItemAt(FileCode.getSelectedIndex()).trim();
        String DOO = txtDateOfOffense.getText().trim();
        String OfficeInCharge = txtOficerInCharge.getText().trim();
        String SecondOfficer = txtSecOfficer.getText().trim();
        String Supervisor = txtSupervisor.getText().trim();
        
        String city = "";  
        String gender = "";
        String heading = jtbBasic.getTitleAt(titleNum);
        
        if (!FileCode.getItemAt(0).equals("Select Code"))
        {
            System.out.println("Not Saved");
        }
        else
        {
            System.out.println("Saved?");
            if (savePressed == 1)
            {
                DocxWriter.writeBasicInfo(DOO,comp,code,OfficeInCharge,SecondOfficer,Supervisor);
            }
            else
            {
                System.out.println("Save Pressed: " + savePressed + " CY: " + offSet + " Postion: " + postion +" Box Number: " + boxNum);

                if (heading.equalsIgnoreCase("Complainant"))
                {
                    city = txtCCity.getText() + ", " + txtCState.getText() + " " + txtCZipcode.getText();
                    gender = (String) genderBox.getItemAt(genderBox.getSelectedIndex());

                    getContent(heading, boxNum, postion, jftCFname, jtfCLname, 
                               txtCMInitial, txtCDOB, txtCAddress, city, txtCPhone,
                               txtRace, gender, txtCEmail);
                }
                else if (heading.equalsIgnoreCase("victim"))
                {
                    city = txtVCity.getText() + ", " + txtVState.getText() + " " + txtVZipcode.getText();
                    gender = (String) genderBox1.getItemAt(genderBox1.getSelectedIndex());

                    getContent(heading, boxNum, postion, jftVFname, jtfVLname, 
                               txtVMInitial, txtVDOB, txtVAddress, city, txtVPhone,
                               txtRace1, gender, txtVEmail);
                }
                else if (heading.equalsIgnoreCase("witness"))
                {
                    city = txtWCity.getText() + ", " + txtWState.getText() + " " + txtWZipcode.getText();
                    gender = (String) genderBox2.getItemAt(genderBox2.getSelectedIndex());

                    getContent(heading, boxNum, postion, jftWFname, jtfWLname, 
                               txtWMInitial, txtWDOB, txtWAddress, city, txtWPhone,
                               txtRace2, gender, txtWEmail);
                }
                else if (heading.equalsIgnoreCase("suspect"))
                {
                    city = txtSCity.getText() + ", " + txtCState.getText() + " " + txtCZipcode.getText();
                    gender = (String) genderBox.getItemAt(genderBox3.getSelectedIndex());

                    getContent(heading, boxNum, postion, jftSFname, jtfSLname, 
                               txtSMInitial, txtSDOB, txtSAddress, city, txtSPhone,
                               txtRace3, gender, txtSEmail);
                }
                else if (heading.equalsIgnoreCase("other"))
                {
                    String agent = agencyCB.getItemAt(agencyCB.getSelectedIndex()).trim();
                    city = txtOCity.getText() + ", " + txtOState.getText() + " " + txtOZipcode.getText();


                    getContent(agent, boxNum, postion, jftOFname, jtfOLname, 
                               txtOMInitial, txtODOB, txtOAddress, city, txtOPhone,
                               null, "", txtOEmail);
                }
            }
        }
        savePressed = savePressed + 1;
    }//GEN-LAST:event_btnSaveActionPerformed
    
    private void getContent(String header, int box, int pos,
                            JTextField first, JTextField last, 
                            JTextField mid, JTextField birth,
                            JTextField street, String cityzip,
                            JTextField phone, JTextField race,
                            String gender, JTextField email)
    {
        System.out.println("Heading: " + header + " Box: " + box + " Postion: " + pos);
        
        if (!first.getText().equals(""))
        {
            formValidation.setTextField(first, true);
            if (!last.getText().equals(""))
            {
                formValidation.setTextField(last, true);
                if (checkDate(birth))
                {   
                    // set position and box number
                    boxNum = boxNum + 1;
                    postion = postion - 1905;
        
                    int temp = element;

                    if (element == 0)
                    {
                        Heading.add(header.trim() + " # 1");
                    }
                    else if (element != 0 && Heading.get(temp - 1).contains(header))
                    {
                        System.out.println(header.trim() + " # " + (temp + 1));
                        Heading.add(header.trim() + " # " + (temp + 1));
                    }
                    else if (!Heading.get(temp - 1).contains(header) || !Heading.get(temp - 1).contains(header + " # 1"))
                    {
                        Heading.add(header.trim() + " # 1");
                    }

                    BoxID.add(box);
                    Pos.add(pos);
                    Name.add((first.getText() + " " + mid.getText().toUpperCase() + ". " + last.getText()).trim());
                    DOB.add(birth.getText().trim());
                    Age.add(calcBday(birth.getText(), birth));
                    Street.add(street.getText().trim());
                    Phone.add(formatPhone(phone.getText().trim()));
                    CityZip.add(cityzip.trim());
                    
                    if (race == null)
                    {
                        Race.add("");
                    }
                    else
                    {
                        Race.add(race.getText().trim());
                    }
                    Gender.add(gender.trim());
                    Email.add(email.getText().trim());
                    System.out.println(Heading.size());
                    System.out.println("Element: " + element);

                    element += 1;
                }
            }
            else
            {
                formValidation.setTextField(last, false);
                String input = "";

                input = JOptionPane.showInputDialog(null, "Invalid Information Entered !\n" + header + " needs a last name.");
                last.setText(input);
            }
        }
        else
        {
            formValidation.setTextField(first, false);
            String input = "";
                        
            input = JOptionPane.showInputDialog(null, "Invalid Information Entered !\n" + header + " needs a first name.");
            first.setText(input);
        }
    }
    
    private void printer()
    {
        System.out.println(Heading.size());
        for (int e = 0; e < element; e++)
        {
            DocxWriter.writeBody(Heading.get(e), offSet, BoxID.get(e), Pos.get(e), 
                                 Name.get(e), DOB.get(e), Age.get(e), Street.get(e),
                                 Phone.get(e), CityZip.get(e), Race.get(e), Gender.get(e), Email.get(e));
        }
    }
    
    private int calcBday(String date, JTextField tempBox)
    {
        String day = date.split("/")[1]; 
        String month = date.split("/")[0];
        String year = date.split("/")[2];
        
        if (day.length() != 2)
        {
            day = "0" + day;
        }  
        if (month.length() != 2)
        {
            month = "0" + month;
        }
        
        date = day + "/" + month + "/" + year;
        
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");

        LocalDate dateofBirth = LocalDate.parse(date, formatter);
        LocalDate now = LocalDate.now();
        
        long age = dateofBirth.until(now, YEARS);
        
        return (int) (age);
    }
    
    private String formatPhone(String phone)
    {
        String area = phone.split("-")[1]; 
        String num1 = phone.split("-")[0];
        String num2 = phone.split("-")[2];
        
        phone = "(" + area + ")" + " " + num1 + "-" + num2;
        
        return phone;
    }
    
    private void btnSaveKeyPressed(KeyEvent evt)//GEN-FIRST:event_btnSaveKeyPressed
    {//GEN-HEADEREND:event_btnSaveKeyPressed
        savePressed = savePressed + 1;
// TODO add your handling code here:
    }//GEN-LAST:event_btnSaveKeyPressed

    private void generalTxtFocusLost(FocusEvent evt)//GEN-FIRST:event_generalTxtFocusLost
    {//GEN-HEADEREND:event_generalTxtFocusLost

        /**
        * * Phone Numbers **
        */
        if (evt.getSource() == txtCPhone)
        {
            checkPhone(txtCPhone);
        }
        else if (evt.getSource() == txtVPhone)
        {
            checkPhone(txtVPhone);
        }
        else if (evt.getSource() == txtWPhone)
        {
            checkPhone(txtWPhone);
        }
        else if (evt.getSource() == txtSPhone)
        {
            checkPhone(txtSPhone);
        }
        else if (evt.getSource() == txtOPhone)
        {
            checkPhone(txtOPhone);
        }

        /**
        * * State **
        */
        if (evt.getSource() == txtCState)
        {
            checkState(txtCState);
        }
        else if (evt.getSource() == txtVState)
        {
            checkState(txtVState);
        }
        else if (evt.getSource() == txtWState)
        {
            checkState(txtWState);
        }
        else if (evt.getSource() == txtSState)
        {
            checkState(txtSState);
        }
        else if (evt.getSource() == txtOState)
        {
            checkState(txtOState);
        }

        /**
        * * Date of Birth **
        */
        if (evt.getSource() == txtCDOB)
        {
            checkDate(txtCDOB);
        }
        else if (evt.getSource() == txtVDOB)
        {
            checkDate(txtVDOB);
        }
        else if (evt.getSource() == txtWDOB)
        {
            checkDate(txtWDOB);
        }
        else if (evt.getSource() == txtSDOB)
        {
            checkDate(txtSDOB);
        }
        else if (evt.getSource() == txtODOB)
        {
            checkDate(txtODOB);
        }
        else if (evt.getSource() == txtDateOfOffense)
        {
            checkDate(txtDateOfOffense);
        }
    }//GEN-LAST:event_generalTxtFocusLost

    private void generalTxtFocusGained(FocusEvent evt)//GEN-FIRST:event_generalTxtFocusGained
    {//GEN-HEADEREND:event_generalTxtFocusGained

        /**
        * * Phone Number **
        */
        if (evt.getSource() == txtCPhone)
        {
            clearTextBox(txtCPhone);
        }
        else if (evt.getSource() == txtVPhone)
        {
            clearTextBox(txtVPhone);
        }
        else if (evt.getSource() == txtWPhone)
        {
            clearTextBox(txtWPhone);
        }
        else if (evt.getSource() == txtSPhone)
        {
            clearTextBox(txtSPhone);
        }
        else if (evt.getSource() == txtOPhone)
        {
            clearTextBox(txtOPhone);
        }
    }//GEN-LAST:event_generalTxtFocusGained

    private void FileCodeItemStateChanged(ItemEvent evt)//GEN-FIRST:event_FileCodeItemStateChanged
    {//GEN-HEADEREND:event_FileCodeItemStateChanged
        CardLayout card = (CardLayout) mainPanel.getLayout();

        if (evt.getStateChange() == 1)
        {
            // System.out.println(FileCode.getItemAt(FileCode.getSelectedIndex()));
            if (FileCode.getSelectedIndex() == 1)
            {
                FileCode.setToolTipText(FileCode.getItemAt(FileCode.getSelectedIndex()));

                // delete delete panels
//                mainPanel.remove(pane2);
                btnSave.setEnabled(true);
            }
            else if (FileCode.getSelectedIndex() == 2)
            {
                FileCode.setToolTipText(FileCode.getItemAt(FileCode.getSelectedIndex()));

                // add panels
                mainPanel.add(pane2);
                mainPanel.add(pane3);
                btnSave.setEnabled(true);
            }
            else if (FileCode.getSelectedIndex() == 3)
            {
                FileCode.setToolTipText(FileCode.getItemAt(FileCode.getSelectedIndex()));

                // add panels
                mainPanel.add(pane2);
                mainPanel.add(pane3);
                btnSave.setEnabled(true);
            }
            else
            {
                FileCode.setToolTipText(FileCode.getItemAt(FileCode.getSelectedIndex()));
                btnSave.setEnabled(true);
                System.out.println("Not implemented yet");
            }
        }
    }//GEN-LAST:event_FileCodeItemStateChanged

    private void txtRaceActionPerformed(ActionEvent evt)//GEN-FIRST:event_txtRaceActionPerformed
    {//GEN-HEADEREND:event_txtRaceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtRaceActionPerformed

    private void txtRace2ActionPerformed(ActionEvent evt)//GEN-FIRST:event_txtRace2ActionPerformed
    {//GEN-HEADEREND:event_txtRace2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtRace2ActionPerformed

    private void txtRace3ActionPerformed(ActionEvent evt)//GEN-FIRST:event_txtRace3ActionPerformed
    {//GEN-HEADEREND:event_txtRace3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtRace3ActionPerformed

    private void txtRace1ActionPerformed(ActionEvent evt)//GEN-FIRST:event_txtRace1ActionPerformed
    {//GEN-HEADEREND:event_txtRace1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtRace1ActionPerformed

    private void addActionPerformed(ActionEvent evt)//GEN-FIRST:event_addActionPerformed
    {//GEN-HEADEREND:event_addActionPerformed
        int option = 2;

        int titleNum = jtbBasic.getSelectedIndex();

        String city = "";  
        String gender = "";
        String heading = jtbBasic.getTitleAt(titleNum);
        
        option = JOptionPane.showConfirmDialog(null, "Adding another complainant will clear the current one.\n" +
                                                         "You can edit the previous " + heading + " after the document is outputed", 
                                                         "Select an Option...",
                                                         JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

        
        if ((jftCFname.getText().isEmpty() && jtfCLname.getText().isEmpty()) || txtCDOB.getText().isEmpty())
        { 
            if (option == 0)
            {
                clearTextBoxes(jftCFname, jtfCLname, txtCMInitial, 
                               txtCDOB, txtCAddress, txtCCity, 
                               txtCPhone, txtCState, txtCZipcode,
                               txtRace,txtCEmail, genderBox);

                city = txtCCity.getText() + ", " + txtCState.getText() + " " + txtCZipcode.getText();
                gender = (String) genderBox.getItemAt(genderBox.getSelectedIndex());

                getContent(heading, boxNum, postion, jftCFname, jtfCLname, 
                           txtCMInitial, txtCDOB, txtCAddress, city, txtCPhone,
                           txtRace, gender, txtCEmail);
            }
        }
        else
        {
            city = txtCCity.getText() + ", " + txtCState.getText() + " " + txtCZipcode.getText();
            gender = (String) genderBox.getItemAt(genderBox.getSelectedIndex());

            getContent(heading, boxNum, postion, jftCFname, jtfCLname, 
                       txtCMInitial, txtCDOB, txtCAddress, city, txtCPhone,
                       txtRace, gender, txtCEmail);
            
            if (option == 0)
            {
                clearTextBoxes(jftCFname, jtfCLname, txtCMInitial, 
                               txtCDOB, txtCAddress, txtCCity, 
                               txtCPhone, txtCState, txtCZipcode,
                               txtRace,txtCEmail, genderBox);

                city = txtCCity.getText() + ", " + txtCState.getText() + " " + txtCZipcode.getText();
                gender = (String) genderBox.getItemAt(genderBox.getSelectedIndex());

                getContent(heading, boxNum, postion, jftCFname, jtfCLname, 
                           txtCMInitial, txtCDOB, txtCAddress, city, txtCPhone,
                           txtRace, gender, txtCEmail);
            }
        }
    }//GEN-LAST:event_addActionPerformed

    private void add1ActionPerformed(ActionEvent evt)//GEN-FIRST:event_add1ActionPerformed
    {//GEN-HEADEREND:event_add1ActionPerformed
        int option = 2;
        
        int titleNum = jtbBasic.getSelectedIndex();
        
        String city = "";  
        String gender = "";
        String heading = jtbBasic.getTitleAt(titleNum);
        
        option = JOptionPane.showConfirmDialog(null, "Adding another complainant will clear the current one.\n" +
                                                         "You can edit the previous " + heading + " after the document is outputed", 
                                                         "Add another  " + heading,
                                                         JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

        if ((jftVFname.getText().isEmpty() && jtfVLname.getText().isEmpty()) || txtVDOB.getText().isEmpty())
        {
            if (option == 0)
            {
                clearTextBoxes(jftVFname, jtfVLname, txtVMInitial, 
                               txtVDOB, txtVAddress, txtVCity, 
                               txtVPhone, txtVState, txtVZipcode,
                               txtRace1,txtVEmail, genderBox1);

                city = txtVCity.getText() + ", " + txtVState.getText() + " " + txtVZipcode.getText();
                gender = (String) genderBox1.getItemAt(genderBox1.getSelectedIndex());

                getContent(heading, boxNum, postion, jftVFname, jtfVLname, 
                           txtVMInitial, txtVDOB, txtVAddress, city, txtVPhone,
                           txtRace1, gender, txtVEmail);
            }
        }
        else
        {
            city = txtVCity.getText() + ", " + txtVState.getText() + " " + txtVZipcode.getText();
            gender = (String) genderBox1.getItemAt(genderBox1.getSelectedIndex());

            getContent(heading, boxNum, postion, jftVFname, jtfVLname, 
                       txtVMInitial, txtVDOB, txtVAddress, city, txtVPhone,
                       txtRace1, gender, txtVEmail);
            if (option == 0)
            {
                clearTextBoxes(jftVFname, jtfVLname, txtVMInitial, 
                               txtVDOB, txtVAddress, txtVCity, 
                               txtVPhone, txtVState, txtVZipcode,
                               txtRace1,txtVEmail, genderBox1);

                city = txtVCity.getText() + ", " + txtVState.getText() + " " + txtVZipcode.getText();
                gender = (String) genderBox1.getItemAt(genderBox1.getSelectedIndex());

                getContent(heading, boxNum, postion, jftVFname, jtfVLname, 
                           txtVMInitial, txtVDOB, txtVAddress, city, txtVPhone,
                           txtRace1, gender, txtVEmail);
            }
        }
    }//GEN-LAST:event_add1ActionPerformed

    private void add2ActionPerformed(ActionEvent evt)//GEN-FIRST:event_add2ActionPerformed
    {//GEN-HEADEREND:event_add2ActionPerformed
        int option = 2;
        
        int titleNum = jtbBasic.getSelectedIndex();
        
        String city = "";  
        String gender = "";
        String heading = jtbBasic.getTitleAt(titleNum);
        
        option = JOptionPane.showConfirmDialog(null, "Adding another complainant will clear the current one.\n" +
                                                     "You can edit the previous " + heading + " after the document is outputed", 
                                                     "Add another  " + heading,
                                                     JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if ((jftWFname.getText().isEmpty() && jtfWLname.getText().isEmpty()) || txtWDOB.getText().isEmpty())
        {
            if (option == 0)
            {
                clearTextBoxes(jftWFname, jtfWLname, txtWMInitial, 
                               txtWDOB, txtWAddress, txtWCity, 
                               txtWPhone, txtWState, txtWZipcode,
                               txtRace2,txtWEmail, genderBox2);

                city = txtWCity.getText() + ", " + txtWState.getText() + " " + txtWZipcode.getText();
                gender = (String) genderBox2.getItemAt(genderBox2.getSelectedIndex());

                getContent(heading, boxNum, postion, jftWFname, jtfWLname, 
                           txtWMInitial, txtWDOB, txtWAddress, city, txtWPhone,
                           txtRace2, gender, txtWEmail);
            }
        }
        else
        {
            city = txtWCity.getText() + ", " + txtWState.getText() + " " + txtWZipcode.getText();
            gender = (String) genderBox2.getItemAt(genderBox2.getSelectedIndex());

            getContent(heading, boxNum, postion, jftWFname, jtfWLname, 
                       txtWMInitial, txtWDOB, txtWAddress, city, txtWPhone,
                       txtRace2, gender, txtWEmail);
            if (option == 0)
            {
                clearTextBoxes(jftWFname, jtfWLname, txtWMInitial, 
                               txtWDOB, txtWAddress, txtWCity, 
                               txtWPhone, txtWState, txtWZipcode,
                               txtRace2,txtWEmail, genderBox2);

                city = txtWCity.getText() + ", " + txtWState.getText() + " " + txtWZipcode.getText();
                gender = (String) genderBox2.getItemAt(genderBox2.getSelectedIndex());

                getContent(heading, boxNum, postion, jftWFname, jtfWLname, 
                           txtWMInitial, txtWDOB, txtWAddress, city, txtWPhone,
                           txtRace2, gender, txtWEmail);
            }
        }
    }//GEN-LAST:event_add2ActionPerformed

    private void add3ActionPerformed(ActionEvent evt)//GEN-FIRST:event_add3ActionPerformed
    {//GEN-HEADEREND:event_add3ActionPerformed
        int option = 2;
        
        int titleNum = jtbBasic.getSelectedIndex();
        
        String city = "";  
        String gender = "";
        String heading = jtbBasic.getTitleAt(titleNum);
        
        option = JOptionPane.showConfirmDialog(null, "Adding another complainant will clear the current one.\n" +
                                                     "You can edit the previous " + heading + " after the document is outputed", 
                                                     "Add another  " + heading,
                                                     JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if ((jftSFname.getText().isEmpty() && jtfSLname.getText().isEmpty()) || txtSDOB.getText().isEmpty())
        {
            if (option == 0)
            {
                clearTextBoxes(jftSFname, jtfSLname, txtSMInitial, 
                               txtSDOB, txtSAddress, txtSCity, 
                               txtSPhone, txtSState, txtSZipcode,
                               txtRace3,txtSEmail, agencyCB);

                city = txtSCity.getText() + ", " + txtSState.getText() + " " + txtSZipcode.getText();
                gender = (String) genderBox3.getItemAt(genderBox3.getSelectedIndex());

                getContent(heading, boxNum, postion, jftSFname, jtfSLname, 
                           txtSMInitial, txtSDOB, txtSAddress, city, txtSPhone,
                           txtRace3, gender, txtSEmail);
            }   
        }
        else
        {
            city = txtSCity.getText() + ", " + txtSState.getText() + " " + txtSZipcode.getText();
            gender = (String) genderBox3.getItemAt(genderBox3.getSelectedIndex());

            getContent(heading, boxNum, postion, jftSFname, jtfSLname, 
                       txtSMInitial, txtSDOB, txtSAddress, city, txtSPhone,
                       txtRace3, gender, txtSEmail);
            if (option == 0)
            {
                clearTextBoxes(jftSFname, jtfSLname, txtSMInitial, 
                               txtSDOB, txtSAddress, txtSCity, 
                               txtSPhone, txtSState, txtSZipcode,
                               txtRace3,txtSEmail, agencyCB);

                city = txtSCity.getText() + ", " + txtSState.getText() + " " + txtSZipcode.getText();
                gender = (String) genderBox3.getItemAt(genderBox3.getSelectedIndex());

                getContent(heading, boxNum, postion, jftSFname, jtfSLname, 
                           txtSMInitial, txtSDOB, txtSAddress, city, txtSPhone,
                           txtRace3, gender, txtSEmail);
            }
        }
    }//GEN-LAST:event_add3ActionPerformed

    private void add4ActionPerformed(ActionEvent evt)//GEN-FIRST:event_add4ActionPerformed
    {//GEN-HEADEREND:event_add4ActionPerformed
        int option = 2;
        String agent = "";
        int titleNum = jtbBasic.getSelectedIndex();
        
        String city = "";  
        String heading = jtbBasic.getTitleAt(titleNum);
        
        option = JOptionPane.showConfirmDialog(null, "Adding another complainant will clear the current one.\n" +
                                                     "You can edit the previous " + heading + " after the document is outputed", 
                                                     "Add another  " + heading,
                                                     JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if ((jftSFname.getText().isEmpty() && jtfSLname.getText().isEmpty()) || txtSDOB.getText().isEmpty())
        {
            if (option == 0)
            {
                clearTextBoxes(jftOFname, jtfOLname, txtOMInitial, 
                               txtODOB, txtOAddress, txtOCity, 
                               txtOPhone, txtOState, txtOZipcode,
                               null,txtOEmail, agencyCB);

                agent = agencyCB.getItemAt(agencyCB.getSelectedIndex()).trim();
                city = txtOCity.getText() + ", " + txtOState.getText() + " " + txtOZipcode.getText();
        
                getContent(agent, boxNum, postion, jftOFname, jtfOLname, 
                           txtOMInitial, txtODOB, txtOAddress, city, txtOPhone,
                           null, null, txtOEmail);
                // TODO add your handling code here:
            }
        }
        else
        {
            agent = agencyCB.getItemAt(agencyCB.getSelectedIndex()).trim();
            city = txtOCity.getText() + ", " + txtOState.getText() + " " + txtOZipcode.getText();
    
            getContent(agent, boxNum, postion, jftOFname, jtfOLname, 
                       txtOMInitial, txtODOB, txtOAddress, city, txtOPhone,
                       null, null, txtOEmail);
            if (option == 0)
            {
                clearTextBoxes(jftOFname, jtfOLname, txtOMInitial, 
                               txtODOB, txtOAddress, txtOCity, 
                               txtOPhone, txtOState, txtOZipcode,
                               null,txtOEmail, agencyCB);

                agent = agencyCB.getItemAt(agencyCB.getSelectedIndex()).trim();
                city = txtOCity.getText() + ", " + txtOState.getText() + " " + txtOZipcode.getText();
        
                getContent(agent, boxNum, postion, jftOFname, jtfOLname, 
                           txtOMInitial, txtODOB, txtOAddress, city, txtOPhone,
                           null, null, txtOEmail);
                // TODO add your handling code here:
            }
        }
    }//GEN-LAST:event_add4ActionPerformed

    private void helpMenuActionPerformed(ActionEvent evt)//GEN-FIRST:event_helpMenuActionPerformed
    {//GEN-HEADEREND:event_helpMenuActionPerformed
         CardLayout card = (CardLayout) mainPanel.getLayout();
         card.show(mainPanel, "card5");
         System.out.println("here");
// TODO add your handling code here:
    }//GEN-LAST:event_helpMenuActionPerformed

    private void helpActionPerformed(ActionEvent evt)//GEN-FIRST:event_helpActionPerformed
    {//GEN-HEADEREND:event_helpActionPerformed
//        CardLayout card = (CardLayout) mainPanel.getLayout();
//        card.show(mainPanel, "card5");
//        System.out.println("here");
        helpDialog.setSize(542, 234);
        helpDialog.setVisible(true);
    }//GEN-LAST:event_helpActionPerformed

    private void txtColorActionPerformed(ActionEvent evt)//GEN-FIRST:event_txtColorActionPerformed
    {//GEN-HEADEREND:event_txtColorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtColorActionPerformed

    private void vehicleTypeItemStateChanged(ItemEvent evt)//GEN-FIRST:event_vehicleTypeItemStateChanged
    {//GEN-HEADEREND:event_vehicleTypeItemStateChanged
        if (evt.getStateChange() == 1)
        {
            // System.out.println(FileCode.getItemAt(FileCode.getSelectedIndex()));
            if (vehicleType.getSelectedIndex() == 1)
            {
                vehicleType.setToolTipText((String) vehicleType.getItemAt(vehicleType.getSelectedIndex()));
            }
            else if (vehicleType.getSelectedIndex() == 2)
            {
                vehicleType.setToolTipText((String) vehicleType.getItemAt(vehicleType.getSelectedIndex()));
            }
            else if (vehicleType.getSelectedIndex() == 3)
            {
                vehicleType.setToolTipText((String) vehicleType.getItemAt(vehicleType.getSelectedIndex()));
            }
            else if (vehicleType.getSelectedIndex() == 4)
            {
                vehicleType.setToolTipText((String) vehicleType.getItemAt(vehicleType.getSelectedIndex()));
            }
            else
            {
                vehicleType.setToolTipText((String) vehicleType.getItemAt(vehicleType.getSelectedIndex()));
            }
        }
        
        // TODO add your handling code here:
    }//GEN-LAST:event_vehicleTypeItemStateChanged

    private void clearTextBoxes(JFormattedTextField fname, JFormattedTextField lname, 
                                JTextField mid, JTextField birth, JTextField street, 
                                JTextField city, JTextField phone, JTextField state, 
                                JTextField zip, JTextField race, JTextField email,
                                JComboBox cb)
    {
        fname.setText("");
        lname.setText("");
        mid.setText("");
        birth.setText("");
        street.setText("");
        city.setText("");
        phone.setText("999-999-9999");
        state.setText("");
        zip.setText("");
        
        if (race != null)
        {
            race.setText("");
        }
        email.setText(""); 
        cb.setSelectedIndex(0);
    }
    private void checkState( JTextField txtTemp )
    {
        // validate state
        String state = txtTemp.getText();
        state = state.toUpperCase();
        txtTemp.setText(state);

        if (formValidation.validateState(state))
        {
            // should call print to file
            System.out.println("pass");
        }
        else
        {
            System.out.println("fail");
        }
    }

    private boolean checkDate( JTextField txtDate )
    {
        // validate state
        String date = txtDate.getText();

        String errorMessage = "Invalid Date! ex. 01/01/2017";

        if (formValidation.validDate(date))
        {
            // should call print to file
            System.out.println("pass");
            formValidation.setTextField(txtDate, true); 
            
            return true;
        }
        else
        {
            String input = "";
                        
            input = JOptionPane.showInputDialog(null, "Invalid Information Entered !\n" + errorMessage);
            txtDate.setText(input);

            formValidation.setTextField(txtDate, false);
            
            return false;
        }
    }

    private void clearTextBox( JTextField txtClear )
    {
        if (txtClear.getText().equalsIgnoreCase("999-999-9999"))
        {
            // if the box is empty replace placeholder
            txtClear.setText("");
        }
    }

    private void checkPhone( JTextField txtTemp )
    {
        String input = txtTemp.getText();
        if (txtTemp.getText().equalsIgnoreCase(""))
        {
            // if the box is empty replace placeholder
            txtTemp.setText("999-999-9999");
        }
        else
        {
            if (formValidation.validatePhoneNumber(input))
            {
                System.out.println("pass");
            }
            else
            {
                System.out.println("fail");
            }
            // else check the containts to see if it is a phone #
            // if the containts is not a phone # warn user of format and 
            // clear the box

            // if the containts of the box is a phone # save the containts
            // to the file
            // add save to file code.
        }
        mainPanel.revalidate();
    }

    /**
     * @param args the command line arguments
     */
    public static void main( String args[] )
    {
        // test for 7z
        try
        {
            /* Set the Nimbus look and feel */
            //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
            /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
            * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
            */
            try
            {
                for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
                {
                    if ("SystemLookAndFeel".equals(info.getName()))
                    {
                        javax.swing.UIManager.setLookAndFeel(info.getClassName());
                        break;
                    }
                }
            }
            catch (ClassNotFoundException ex)
            {
                java.util.logging.Logger.getLogger(TestCardLayout.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            }
            catch (InstantiationException ex)
            {
                java.util.logging.Logger.getLogger(TestCardLayout.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            }
            catch (IllegalAccessException ex)
            {
                java.util.logging.Logger.getLogger(TestCardLayout.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            }
            catch (javax.swing.UnsupportedLookAndFeelException ex)
            {
                java.util.logging.Logger.getLogger(TestCardLayout.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            }
            //</editor-fold>
            
  
            DocxWriter.checkFor7z();
            try
            {
//                String message = "The bugs we discussed earlier are still\n " +
//                                 "present.";
//                JOptionPane.showMessageDialog(null, "Copy the 7z.exe from the 7z folder and place it where the MCOLES program is.",
//                                "Error 7z not installed!",
//                                JOptionPane.OK_OPTION);
                DocxWriter.writeMETAFile();
                DocxWriter.writeSettingsFile();
                DocxWriter.writeStylesFile();
                DocxWriter.writeHeader1File();
                DocxWriter.writeHeader2File();
                DocxWriter.writeContentFileStart();
                // TODO add your handling code here:
            }
            catch (FileNotFoundException ex)
            {
                Logger.getLogger(TestCardLayout.class.getName()).log(Level.SEVERE, null, ex);
            }

            
            /* Create and display the form */
            java.awt.EventQueue.invokeLater(new Runnable()
            {
                public void run()
                {
                    System.out.println("test");
                    new TestCardLayout().setVisible(true);
                }
            });
            System.out.println("test");
            
        }
        catch (IOException ex)
        {
            JOptionPane.showConfirmDialog(null, "Copy the 7z.exe from the 7z folder and place it where the MCOLES program is.",
                                "Error 7z not installed!",
                                JOptionPane.OK_OPTION, JOptionPane.ERROR_MESSAGE);
        }
        //</editor-fold>

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JComboBox<String> FileCode;
    private JMenuBar MenuBar;
    private JMenu aboutMenu;
    private JButton add;
    private JButton add1;
    private JButton add2;
    private JButton add3;
    private JButton add4;
    private JComboBox<String> agencyCB;
    private JPanel basicsPanel;
    private JButton btnDone;
    private JButton btnSave;
    private JPanel buttonPanel;
    private JPanel centered1;
    private JPanel centered2;
    private JPanel centered3;
    private JPanel centered4;
    private JPanel complainantPane;
    private JFormattedTextField complaintNum;
    private JScrollPane dateVenueScroll;
    private JPanel evidencePane;
    private JComboBox evidenceType;
    private JComboBox genderBox;
    private JComboBox genderBox1;
    private JComboBox genderBox2;
    private JComboBox genderBox3;
    private JMenuItem help;
    private JDialog helpDialog;
    private JMenu helpMenu;
    private JPanel helpPane;
    private JScrollPane informationScroll;
    private JLabel jLabel1;
    private JLabel jLabel2;
    private JLabel jLabel3;
    private JLabel jLabel4;
    private JPanel jPanel1;
    private JScrollPane jScrollPane2;
    private JTextArea jTextArea1;
    private JFormattedTextField jftCFname;
    private JFormattedTextField jftOFname;
    private JFormattedTextField jftSFname;
    private JFormattedTextField jftVFname;
    private JFormattedTextField jftWFname;
    private JTabbedPane jtbBasic;
    private JFormattedTextField jtfCLname;
    private JFormattedTextField jtfOLname;
    private JFormattedTextField jtfSLname;
    private JFormattedTextField jtfVLname;
    private JFormattedTextField jtfWLname;
    private JLabel lblBackground;
    private JLabel lblCAddress1;
    private JLabel lblCCity1;
    private JLabel lblCDOB1;
    private JLabel lblCEmail1;
    private JLabel lblCFname1;
    private JLabel lblCLname1;
    private JLabel lblCMInitial1;
    private JLabel lblCPhone1;
    private JLabel lblCState1;
    private JLabel lblCZipcode1;
    private JLabel lblCodes;
    private JLabel lblColor;
    private JLabel lblComplaint;
    private JLabel lblDate;
    private JLabel lblDateVenue;
    private JLabel lblDirection;
    private JLabel lblLastSeen;
    private JLabel lblLicenseNum;
    private JLabel lblLocation;
    private JLabel lblMake;
    private JLabel lblModel;
    private JLabel lblOfficerInCharge;
    private JLabel lblSecondaryOfficer;
    private JLabel lblSup;
    private JLabel lblVAddress;
    private JLabel lblVAddress1;
    private JLabel lblVAddress2;
    private JLabel lblVAddress4;
    private JLabel lblVCity;
    private JLabel lblVCity1;
    private JLabel lblVCity2;
    private JLabel lblVCity4;
    private JLabel lblVDOB1;
    private JLabel lblVDOB2;
    private JLabel lblVDOB3;
    private JLabel lblVDOB5;
    private JLabel lblVEmail;
    private JLabel lblVEmail1;
    private JLabel lblVEmail2;
    private JLabel lblVEmail4;
    private JLabel lblVFname;
    private JLabel lblVFname1;
    private JLabel lblVFname2;
    private JLabel lblVFname4;
    private JLabel lblVIN;
    private JLabel lblVLname1;
    private JLabel lblVLname2;
    private JLabel lblVLname3;
    private JLabel lblVLname5;
    private JLabel lblVMInitial1;
    private JLabel lblVMInitial2;
    private JLabel lblVMInitial3;
    private JLabel lblVMInitial5;
    private JLabel lblVPhone;
    private JLabel lblVPhone1;
    private JLabel lblVPhone2;
    private JLabel lblVPhone4;
    private JLabel lblVState;
    private JLabel lblVState1;
    private JLabel lblVState2;
    private JLabel lblVState4;
    private JLabel lblVZipcode;
    private JLabel lblVZipcode1;
    private JLabel lblVZipcode2;
    private JLabel lblVZipcode4;
    private JLabel lblYear;
    private JPanel mainPanel;
    private JTextField otherEvidence;
    private JPanel otherPane;
    private JTextField otherVehicle;
    private JPanel pane1;
    private JPanel pane2;
    private JPanel pane3;
    private JPanel suspectPane;
    private JTextArea txtAreaDateVenue;
    private JTextArea txtAreaInfo;
    private JTextField txtCAddress;
    private JTextField txtCCity;
    private JTextField txtCDOB;
    private JTextField txtCEmail;
    private JTextField txtCMInitial;
    private JTextField txtCPhone;
    private JTextField txtCState;
    private JTextField txtCZipcode;
    private JTextField txtColor;
    private JTextField txtDateOfOffense;
    private JTextField txtDirection;
    private JTextArea txtHelpArea;
    private JTextField txtLastSeen;
    private JTextField txtLicenseNum;
    private JTextField txtLocation;
    private JTextField txtMake;
    private JTextField txtModel;
    private JTextField txtOAddress;
    private JTextField txtOCity;
    private JTextField txtODOB;
    private JTextField txtOEmail;
    private JTextField txtOMInitial;
    private JTextField txtOPhone;
    private JTextField txtOState;
    private JTextField txtOZipcode;
    private JFormattedTextField txtOficerInCharge;
    private JTextField txtRace;
    private JTextField txtRace1;
    private JTextField txtRace2;
    private JTextField txtRace3;
    private JTextField txtSAddress;
    private JTextField txtSCity;
    private JTextField txtSDOB;
    private JTextField txtSEmail;
    private JTextField txtSMInitial;
    private JTextField txtSPhone;
    private JTextField txtSState;
    private JTextField txtSZipcode;
    private JFormattedTextField txtSecOfficer;
    private JFormattedTextField txtSupervisor;
    private JTextField txtVAddress;
    private JTextField txtVCity;
    private JTextField txtVDOB;
    private JTextField txtVEmail;
    private JTextField txtVIN;
    private JTextField txtVMInitial;
    private JTextField txtVPhone;
    private JTextField txtVState;
    private JTextField txtVZipcode;
    private JTextField txtWAddress;
    private JTextField txtWCity;
    private JTextField txtWDOB;
    private JTextField txtWEmail;
    private JTextField txtWMInitial;
    private JTextField txtWPhone;
    private JTextField txtWState;
    private JTextField txtWZipcode;
    private JTextField txtYear;
    private JPanel vehiclePane;
    private JComboBox vehicleType;
    private JPanel victimPane;
    private JPanel witnessPane;
    // End of variables declaration//GEN-END:variables
}
